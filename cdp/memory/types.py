'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: memory
Experimental: True
'''

from dataclasses import dataclass, field
import typing



class PressureLevel:
    '''
    Memory pressure level.
    '''
    MODERATE = "moderate"
    CRITICAL = "critical"


@dataclass
class SamplingProfileNode:
    '''
    Heap profile sample.
    '''
    #: Size of the sampled allocation.
    size: float

    #: Total bytes attributed to this sample.
    total: float

    #: Execution stack at the point of allocation.
    stack: typing.List

    @classmethod
    def from_response(cls, response):
        return cls(
            size=float(response.get('size')),
            total=float(response.get('total')),
            stack=[str(i) for i in response.get('stack')],
        )


@dataclass
class SamplingProfile:
    '''
    Array of heap profile samples.
    '''
    samples: typing.List['SamplingProfileNode']

    modules: typing.List['Module']

    @classmethod
    def from_response(cls, response):
        return cls(
            samples=[SamplingProfileNode.from_response(i) for i in response.get('samples')],
            modules=[Module.from_response(i) for i in response.get('modules')],
        )


@dataclass
class Module:
    '''
    Executable module information
    '''
    #: Name of the module.
    name: str

    #: UUID of the module.
    uuid: str

    #: Base address where the module is loaded into memory. Encoded as a decimal
    #: or hexadecimal (0x prefixed) string.
    base_address: str

    #: Size of the module in bytes.
    size: float

    @classmethod
    def from_response(cls, response):
        return cls(
            name=str(response.get('name')),
            uuid=str(response.get('uuid')),
            base_address=str(response.get('baseAddress')),
            size=float(response.get('size')),
        )

