'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: memory
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing


class PressureLevel(enum.Enum):
    '''
    Memory pressure level.
    '''
    MODERATE = "moderate"
    CRITICAL = "critical"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> 'PressureLevel':
        return cls(json)


@dataclass
class SamplingProfileNode:
    '''
    Heap profile sample.
    '''
    #: Size of the sampled allocation.
    size: float

    #: Total bytes attributed to this sample.
    total: float

    #: Execution stack at the point of allocation.
    stack: typing.List['str']

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'size': self.size,
            'total': self.total,
            'stack': [i for i in self.stack],
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'SamplingProfileNode':
        return cls(
            size=json['size'],
            total=json['total'],
            stack=[i for i in json['stack']],
        )

@dataclass
class SamplingProfile:
    '''
    Array of heap profile samples.
    '''
    samples: typing.List['SamplingProfileNode']

    modules: typing.List['Module']

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'samples': [i.to_json() for i in self.samples],
            'modules': [i.to_json() for i in self.modules],
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'SamplingProfile':
        return cls(
            samples=[SamplingProfileNode.from_json(i) for i in json['samples']],
            modules=[Module.from_json(i) for i in json['modules']],
        )

@dataclass
class Module:
    '''
    Executable module information
    '''
    #: Name of the module.
    name: str

    #: UUID of the module.
    uuid: str

    #: Base address where the module is loaded into memory. Encoded as a decimal
    #: or hexadecimal (0x prefixed) string.
    base_address: str

    #: Size of the module in bytes.
    size: float

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'name': self.name,
            'uuid': self.uuid,
            'baseAddress': self.base_address,
            'size': self.size,
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'Module':
        return cls(
            name=json['name'],
            uuid=json['uuid'],
            base_address=json['baseAddress'],
            size=json['size'],
        )

