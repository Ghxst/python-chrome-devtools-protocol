'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: dom_storage
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *


def clear(
        storage_id: StorageId,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param storage_id: 
    '''
    params: T_JSON_DICT = {
        'storageId': storage_id.to_json(),
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'DOMStorage.clear',
        'params': params,
    }
    json = yield cmd_dict


def disable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Disables storage tracking, prevents storage events from being sent to the client.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'DOMStorage.disable',
    }
    json = yield cmd_dict


def enable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Enables storage tracking, storage events will now be delivered to the client.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'DOMStorage.enable',
    }
    json = yield cmd_dict


def get_dom_storage_items(
        storage_id: StorageId,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,typing.List['Item']]:
    '''
    
    
    :param storage_id: 
    :returns: 
    '''
    params: T_JSON_DICT = {
        'storageId': storage_id.to_json(),
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'DOMStorage.getDOMStorageItems',
        'params': params,
    }
    json = yield cmd_dict
    return [Item.from_json(i) for i in json['entries']]


def remove_dom_storage_item(
        storage_id: StorageId,
        key: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param storage_id: 
    :param key: 
    '''
    params: T_JSON_DICT = {
        'storageId': storage_id.to_json(),
        'key': key,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'DOMStorage.removeDOMStorageItem',
        'params': params,
    }
    json = yield cmd_dict


def set_dom_storage_item(
        storage_id: StorageId,
        key: str,
        value: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param storage_id: 
    :param key: 
    :param value: 
    '''
    params: T_JSON_DICT = {
        'storageId': storage_id.to_json(),
        'key': key,
        'value': value,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'DOMStorage.setDOMStorageItem',
        'params': params,
    }
    json = yield cmd_dict


