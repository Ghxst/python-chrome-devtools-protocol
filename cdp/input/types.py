'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: input
Experimental: False
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing


class GestureSourceType(enum.Enum):
    DEFAULT = "default"
    TOUCH = "touch"
    MOUSE = "mouse"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> 'GestureSourceType':
        return cls(json)


class TimeSinceEpoch(float):
    '''
    UTC time in seconds, counted from January 1, 1970.
    '''
    def to_json(self) -> float:
        return self

    @classmethod
    def from_json(cls, json: float) -> 'TimeSinceEpoch':
        return cls(json)

    def __repr__(self):
        return 'TimeSinceEpoch({})'.format(float.__repr__(self))


@dataclass
class TouchPoint:
    #: X coordinate of the event relative to the main frame's viewport in CSS pixels.
    x: float

    #: Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
    #: the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
    y: float

    #: X radius of the touch area (default: 1.0).
    radius_x: typing.Optional[float] = None

    #: Y radius of the touch area (default: 1.0).
    radius_y: typing.Optional[float] = None

    #: Rotation angle (default: 0.0).
    rotation_angle: typing.Optional[float] = None

    #: Force (default: 1.0).
    force: typing.Optional[float] = None

    #: Identifier used to track touch sources between events, must be unique within an event.
    id: typing.Optional[float] = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'x': self.x,
            'y': self.y,
        }
        if self.radius_x is not None:
            json['radiusX'] = self.radius_x
        if self.radius_y is not None:
            json['radiusY'] = self.radius_y
        if self.rotation_angle is not None:
            json['rotationAngle'] = self.rotation_angle
        if self.force is not None:
            json['force'] = self.force
        if self.id is not None:
            json['id'] = self.id
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'TouchPoint':
        radius_x = json['radiusX'] if 'radiusX' in json else None
        radius_y = json['radiusY'] if 'radiusY' in json else None
        rotation_angle = json['rotationAngle'] if 'rotationAngle' in json else None
        force = json['force'] if 'force' in json else None
        id = json['id'] if 'id' in json else None
        return cls(
            x=json['x'],
            y=json['y'],
            radius_x=radius_x,
            radius_y=radius_y,
            rotation_angle=rotation_angle,
            force=force,
            id=id,
        )

