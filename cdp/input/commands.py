'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: input
Experimental: False
'''

from dataclasses import dataclass, field
import typing

from .types import *


class Input:
    @staticmethod
    def dispatch_key_event(type: str, modifiers: int, timestamp: TimeSinceEpoch, text: str, unmodified_text: str, key_identifier: str, code: str, key: str, windows_virtual_key_code: int, native_virtual_key_code: int, auto_repeat: bool, is_keypad: bool, is_system_key: bool, location: int) -> None:
        '''
        Dispatches a key event to the page.
        
        :param type: Type of the key event.
        :param modifiers: Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
        (default: 0).
        :param timestamp: Time at which the event occurred.
        :param text: Text as generated by processing a virtual key code with a keyboard layout. Not needed for
        for `keyUp` and `rawKeyDown` events (default: "")
        :param unmodified_text: Text that would have been generated by the keyboard if no modifiers were pressed (except for
        shift). Useful for shortcut (accelerator) key handling (default: "").
        :param key_identifier: Unique key identifier (e.g., 'U+0041') (default: "").
        :param code: Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
        :param key: Unique DOM defined string value describing the meaning of the key in the context of active
        modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
        :param windows_virtual_key_code: Windows virtual key code (default: 0).
        :param native_virtual_key_code: Native virtual key code (default: 0).
        :param auto_repeat: Whether the event was generated from auto repeat (default: false).
        :param is_keypad: Whether the event was generated from the keypad (default: false).
        :param is_system_key: Whether the event was a system key event (default: false).
        :param location: Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:
        0).
        '''

        cmd_dict = {
            'method': 'Input.dispatchKeyEvent',
            'params': {
                'type': type,
                'modifiers': modifiers,
                'timestamp': timestamp,
                'text': text,
                'unmodifiedText': unmodified_text,
                'keyIdentifier': key_identifier,
                'code': code,
                'key': key,
                'windowsVirtualKeyCode': windows_virtual_key_code,
                'nativeVirtualKeyCode': native_virtual_key_code,
                'autoRepeat': auto_repeat,
                'isKeypad': is_keypad,
                'isSystemKey': is_system_key,
                'location': location,
            }
        }
        response = yield cmd_dict

    @staticmethod
    def insert_text(text: str) -> None:
        '''
        This method emulates inserting text that doesn't come from a key press,
        for example an emoji keyboard or an IME.
        
        :param text: The text to insert.
        '''

        cmd_dict = {
            'method': 'Input.insertText',
            'params': {
                'text': text,
            }
        }
        response = yield cmd_dict

    @staticmethod
    def dispatch_mouse_event(type: str, x: float, y: float, modifiers: int, timestamp: TimeSinceEpoch, button: str, buttons: int, click_count: int, delta_x: float, delta_y: float, pointer_type: str) -> None:
        '''
        Dispatches a mouse event to the page.
        
        :param type: Type of the mouse event.
        :param x: X coordinate of the event relative to the main frame's viewport in CSS pixels.
        :param y: Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
        the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
        :param modifiers: Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
        (default: 0).
        :param timestamp: Time at which the event occurred.
        :param button: Mouse button (default: "none").
        :param buttons: A number indicating which buttons are pressed on the mouse when a mouse event is triggered.
        Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.
        :param click_count: Number of times the mouse button was clicked (default: 0).
        :param delta_x: X delta in CSS pixels for mouse wheel event (default: 0).
        :param delta_y: Y delta in CSS pixels for mouse wheel event (default: 0).
        :param pointer_type: Pointer type (default: "mouse").
        '''

        cmd_dict = {
            'method': 'Input.dispatchMouseEvent',
            'params': {
                'type': type,
                'x': x,
                'y': y,
                'modifiers': modifiers,
                'timestamp': timestamp,
                'button': button,
                'buttons': buttons,
                'clickCount': click_count,
                'deltaX': delta_x,
                'deltaY': delta_y,
                'pointerType': pointer_type,
            }
        }
        response = yield cmd_dict

    @staticmethod
    def dispatch_touch_event(type: str, touch_points: typing.List['TouchPoint'], modifiers: int, timestamp: TimeSinceEpoch) -> None:
        '''
        Dispatches a touch event to the page.
        
        :param type: Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while
        TouchStart and TouchMove must contains at least one.
        :param touch_points: Active touch points on the touch device. One event per any changed point (compared to
        previous touch event in a sequence) is generated, emulating pressing/moving/releasing points
        one by one.
        :param modifiers: Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
        (default: 0).
        :param timestamp: Time at which the event occurred.
        '''

        cmd_dict = {
            'method': 'Input.dispatchTouchEvent',
            'params': {
                'type': type,
                'touchPoints': touch_points,
                'modifiers': modifiers,
                'timestamp': timestamp,
            }
        }
        response = yield cmd_dict

    @staticmethod
    def emulate_touch_from_mouse_event(type: str, x: int, y: int, button: str, timestamp: TimeSinceEpoch, delta_x: float, delta_y: float, modifiers: int, click_count: int) -> None:
        '''
        Emulates touch event from the mouse event parameters.
        
        :param type: Type of the mouse event.
        :param x: X coordinate of the mouse pointer in DIP.
        :param y: Y coordinate of the mouse pointer in DIP.
        :param button: Mouse button.
        :param timestamp: Time at which the event occurred (default: current time).
        :param delta_x: X delta in DIP for mouse wheel event (default: 0).
        :param delta_y: Y delta in DIP for mouse wheel event (default: 0).
        :param modifiers: Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
        (default: 0).
        :param click_count: Number of times the mouse button was clicked (default: 0).
        '''

        cmd_dict = {
            'method': 'Input.emulateTouchFromMouseEvent',
            'params': {
                'type': type,
                'x': x,
                'y': y,
                'button': button,
                'timestamp': timestamp,
                'deltaX': delta_x,
                'deltaY': delta_y,
                'modifiers': modifiers,
                'clickCount': click_count,
            }
        }
        response = yield cmd_dict

    @staticmethod
    def set_ignore_input_events(ignore: bool) -> None:
        '''
        Ignores input events (useful while auditing page).
        
        :param ignore: Ignores input events processing when set to true.
        '''

        cmd_dict = {
            'method': 'Input.setIgnoreInputEvents',
            'params': {
                'ignore': ignore,
            }
        }
        response = yield cmd_dict

    @staticmethod
    def synthesize_pinch_gesture(x: float, y: float, scale_factor: float, relative_speed: int, gesture_source_type: GestureSourceType) -> None:
        '''
        Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
        
        :param x: X coordinate of the start of the gesture in CSS pixels.
        :param y: Y coordinate of the start of the gesture in CSS pixels.
        :param scale_factor: Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
        :param relative_speed: Relative pointer speed in pixels per second (default: 800).
        :param gesture_source_type: Which type of input events to be generated (default: 'default', which queries the platform
        for the preferred input type).
        '''

        cmd_dict = {
            'method': 'Input.synthesizePinchGesture',
            'params': {
                'x': x,
                'y': y,
                'scaleFactor': scale_factor,
                'relativeSpeed': relative_speed,
                'gestureSourceType': gesture_source_type,
            }
        }
        response = yield cmd_dict

    @staticmethod
    def synthesize_scroll_gesture(x: float, y: float, x_distance: float, y_distance: float, x_overscroll: float, y_overscroll: float, prevent_fling: bool, speed: int, gesture_source_type: GestureSourceType, repeat_count: int, repeat_delay_ms: int, interaction_marker_name: str) -> None:
        '''
        Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
        
        :param x: X coordinate of the start of the gesture in CSS pixels.
        :param y: Y coordinate of the start of the gesture in CSS pixels.
        :param x_distance: The distance to scroll along the X axis (positive to scroll left).
        :param y_distance: The distance to scroll along the Y axis (positive to scroll up).
        :param x_overscroll: The number of additional pixels to scroll back along the X axis, in addition to the given
        distance.
        :param y_overscroll: The number of additional pixels to scroll back along the Y axis, in addition to the given
        distance.
        :param prevent_fling: Prevent fling (default: true).
        :param speed: Swipe speed in pixels per second (default: 800).
        :param gesture_source_type: Which type of input events to be generated (default: 'default', which queries the platform
        for the preferred input type).
        :param repeat_count: The number of times to repeat the gesture (default: 0).
        :param repeat_delay_ms: The number of milliseconds delay between each repeat. (default: 250).
        :param interaction_marker_name: The name of the interaction markers to generate, if not empty (default: "").
        '''

        cmd_dict = {
            'method': 'Input.synthesizeScrollGesture',
            'params': {
                'x': x,
                'y': y,
                'xDistance': x_distance,
                'yDistance': y_distance,
                'xOverscroll': x_overscroll,
                'yOverscroll': y_overscroll,
                'preventFling': prevent_fling,
                'speed': speed,
                'gestureSourceType': gesture_source_type,
                'repeatCount': repeat_count,
                'repeatDelayMs': repeat_delay_ms,
                'interactionMarkerName': interaction_marker_name,
            }
        }
        response = yield cmd_dict

    @staticmethod
    def synthesize_tap_gesture(x: float, y: float, duration: int, tap_count: int, gesture_source_type: GestureSourceType) -> None:
        '''
        Synthesizes a tap gesture over a time period by issuing appropriate touch events.
        
        :param x: X coordinate of the start of the gesture in CSS pixels.
        :param y: Y coordinate of the start of the gesture in CSS pixels.
        :param duration: Duration between touchdown and touchup events in ms (default: 50).
        :param tap_count: Number of times to perform the tap (e.g. 2 for double tap, default: 1).
        :param gesture_source_type: Which type of input events to be generated (default: 'default', which queries the platform
        for the preferred input type).
        '''

        cmd_dict = {
            'method': 'Input.synthesizeTapGesture',
            'params': {
                'x': x,
                'y': y,
                'duration': duration,
                'tapCount': tap_count,
                'gestureSourceType': gesture_source_type,
            }
        }
        response = yield cmd_dict

