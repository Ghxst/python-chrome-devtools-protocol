'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: tracing
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *
from ..io import types as io



@dataclass
class BufferUsage:
    percent_full: typing.Optional[float] = None

    event_count: typing.Optional[float] = None

    value: typing.Optional[float] = None

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'Tracing'
    _method = 'bufferUsage'

    @classmethod
    def from_json(cls, json: dict) -> 'BufferUsage':
        percent_full = float(json['percentFull']) if 'percentFull' in json else None
        event_count = float(json['eventCount']) if 'eventCount' in json else None
        value = float(json['value']) if 'value' in json else None
        return cls(
            percent_full=percent_full,
            event_count=event_count,
            value=value,
        )


@dataclass
class DataCollected:
    '''
    Contains an bucket of collected trace events. When tracing is stopped collected events will be
    send as a sequence of dataCollected events followed by tracingComplete event.
    '''
    #: Contains an bucket of collected trace events. When tracing is stopped collected events will be
    #: send as a sequence of dataCollected events followed by tracingComplete event.
    value: typing.List['dict']

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'Tracing'
    _method = 'dataCollected'

    @classmethod
    def from_json(cls, json: dict) -> 'DataCollected':
        return cls(
            value=[dict(i) for i in json['value']],
        )


@dataclass
class TracingComplete:
    '''
    Signals that tracing is stopped and there is no trace buffers pending flush, all data were
    delivered via dataCollected events.
    '''
    #: Signals that tracing is stopped and there is no trace buffers pending flush, all data were
    #: delivered via dataCollected events.
    stream: typing.Optional[io.StreamHandle] = None

    #: Signals that tracing is stopped and there is no trace buffers pending flush, all data were
    #: delivered via dataCollected events.
    trace_format: typing.Optional[StreamFormat] = None

    #: Signals that tracing is stopped and there is no trace buffers pending flush, all data were
    #: delivered via dataCollected events.
    stream_compression: typing.Optional[StreamCompression] = None

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'Tracing'
    _method = 'tracingComplete'

    @classmethod
    def from_json(cls, json: dict) -> 'TracingComplete':
        stream = io.StreamHandle.from_json(json['stream']) if 'stream' in json else None
        trace_format = StreamFormat.from_json(json['traceFormat']) if 'traceFormat' in json else None
        stream_compression = StreamCompression.from_json(json['streamCompression']) if 'streamCompression' in json else None
        return cls(
            stream=stream,
            trace_format=trace_format,
            stream_compression=stream_compression,
        )

