'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: tracing
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *


def end() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Stop trace events collection.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Tracing.end',
    }
    json = yield cmd_dict


def get_categories() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,typing.List['str']]:
    '''
    Gets supported tracing categories.
    :returns: A list of supported tracing categories.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Tracing.getCategories',
    }
    json = yield cmd_dict
    return [str(i) for i in json['categories']]


def record_clock_sync_marker(
        sync_id: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Record a clock sync marker in the trace.
    
    :param sync_id: The ID of this clock sync marker
    '''
    params: T_JSON_DICT = {
        'syncId': sync_id,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'Tracing.recordClockSyncMarker',
        'params': params,
    }
    json = yield cmd_dict


def request_memory_dump() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,dict]:
    '''
    Request a global memory dump.
    :returns: a dict with the following keys:
        * dumpGuid: GUID of the resulting global memory dump.
        * success: True iff the global memory dump succeeded.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Tracing.requestMemoryDump',
    }
    json = yield cmd_dict
    result: T_JSON_DICT = {
        'dumpGuid': str(json['dumpGuid']),
        'success': bool(json['success']),
    }
    return result


def start(
        categories: typing.Optional[str] = None,
        options: typing.Optional[str] = None,
        buffer_usage_reporting_interval: typing.Optional[float] = None,
        transfer_mode: typing.Optional[str] = None,
        stream_format: typing.Optional[StreamFormat] = None,
        stream_compression: typing.Optional[StreamCompression] = None,
        trace_config: typing.Optional[TraceConfig] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Start trace events collection.
    
    :param categories: Category/tag filter
    :param options: Tracing options
    :param buffer_usage_reporting_interval: If set, the agent will issue bufferUsage events at this interval, specified in milliseconds
    :param transfer_mode: Whether to report trace events as series of dataCollected events or to save trace to a
    stream (defaults to `ReportEvents`).
    :param stream_format: Trace data format to use. This only applies when using `ReturnAsStream`
    transfer mode (defaults to `json`).
    :param stream_compression: Compression format to use. This only applies when using `ReturnAsStream`
    transfer mode (defaults to `none`)
    :param trace_config: 
    '''
    params: T_JSON_DICT = {
    }
    if categories is not None:
        params['categories'] = categories
    if options is not None:
        params['options'] = options
    if buffer_usage_reporting_interval is not None:
        params['bufferUsageReportingInterval'] = buffer_usage_reporting_interval
    if transfer_mode is not None:
        params['transferMode'] = transfer_mode
    if stream_format is not None:
        params['streamFormat'] = stream_format.to_json()
    if stream_compression is not None:
        params['streamCompression'] = stream_compression.to_json()
    if trace_config is not None:
        params['traceConfig'] = trace_config.to_json()
    cmd_dict: T_JSON_DICT = {
        'method': 'Tracing.start',
        'params': params,
    }
    json = yield cmd_dict


