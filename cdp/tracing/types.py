'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: tracing
Experimental: True
'''

from dataclasses import dataclass, field
import typing



class StreamFormat:
    '''
    Data format of a trace. Can be either the legacy JSON format or the
    protocol buffer format. Note that the JSON format will be deprecated soon.
    '''
    JSON = "json"
    PROTO = "proto"


class StreamCompression:
    '''
    Compression type to use for traces returned via streams.
    '''
    NONE = "none"
    GZIP = "gzip"


@dataclass
class MemoryDumpConfig:
    '''
    Configuration for memory dump. Used only when "memory-infra" category is enabled.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(
        )


@dataclass
class TraceConfig:
    #: Controls how the trace buffer stores data.
    record_mode: str

    #: Turns on JavaScript stack sampling.
    enable_sampling: bool

    #: Turns on system tracing.
    enable_systrace: bool

    #: Turns on argument filter.
    enable_argument_filter: bool

    #: Included category filters.
    included_categories: typing.List

    #: Excluded category filters.
    excluded_categories: typing.List

    #: Configuration to synthesize the delays in tracing.
    synthetic_delays: typing.List

    #: Configuration for memory dump triggers. Used only when "memory-infra" category is enabled.
    memory_dump_config: MemoryDumpConfig

    @classmethod
    def from_response(cls, response):
        return cls(
            record_mode=str(response.get('recordMode')),
            enable_sampling=bool(response.get('enableSampling')),
            enable_systrace=bool(response.get('enableSystrace')),
            enable_argument_filter=bool(response.get('enableArgumentFilter')),
            included_categories=[str(i) for i in response.get('includedCategories')],
            excluded_categories=[str(i) for i in response.get('excludedCategories')],
            synthetic_delays=[str(i) for i in response.get('syntheticDelays')],
            memory_dump_config=MemoryDumpConfig.from_response(response.get('memoryDumpConfig')),
        )

