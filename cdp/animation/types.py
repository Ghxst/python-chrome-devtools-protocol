'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: animation
Experimental: True
'''

from dataclasses import dataclass, field
import typing

from ..dom import types as dom



@dataclass
class KeyframesRule:
    '''
    Keyframes Rule
    '''
    #: CSS keyframed animation's name.
    name: str

    #: List of animation keyframes.
    keyframes: typing.List['KeyframeStyle']

    @classmethod
    def from_response(cls, response):
        return cls(
            name=str(response.get('name')),
            keyframes=[KeyframeStyle.from_response(i) for i in response.get('keyframes')],
        )


@dataclass
class KeyframeStyle:
    '''
    Keyframe Style
    '''
    #: Keyframe's time offset.
    offset: str

    #: `AnimationEffect`'s timing function.
    easing: str

    @classmethod
    def from_response(cls, response):
        return cls(
            offset=str(response.get('offset')),
            easing=str(response.get('easing')),
        )


@dataclass
class AnimationEffect:
    '''
    AnimationEffect instance
    '''
    #: `AnimationEffect`'s delay.
    delay: float

    #: `AnimationEffect`'s end delay.
    end_delay: float

    #: `AnimationEffect`'s iteration start.
    iteration_start: float

    #: `AnimationEffect`'s iterations.
    iterations: float

    #: `AnimationEffect`'s iteration duration.
    duration: float

    #: `AnimationEffect`'s playback direction.
    direction: str

    #: `AnimationEffect`'s fill mode.
    fill: str

    #: `AnimationEffect`'s target node.
    backend_node_id: dom.BackendNodeId

    #: `AnimationEffect`'s keyframes.
    keyframes_rule: KeyframesRule

    #: `AnimationEffect`'s timing function.
    easing: str

    @classmethod
    def from_response(cls, response):
        return cls(
            delay=float(response.get('delay')),
            end_delay=float(response.get('endDelay')),
            iteration_start=float(response.get('iterationStart')),
            iterations=float(response.get('iterations')),
            duration=float(response.get('duration')),
            direction=str(response.get('direction')),
            fill=str(response.get('fill')),
            backend_node_id=dom.BackendNodeId.from_response(response.get('backendNodeId')),
            keyframes_rule=KeyframesRule.from_response(response.get('keyframesRule')),
            easing=str(response.get('easing')),
        )


@dataclass
class Animation:
    '''
    Animation instance.
    '''
    #: `Animation`'s id.
    id: str

    #: `Animation`'s name.
    name: str

    #: `Animation`'s internal paused state.
    paused_state: bool

    #: `Animation`'s play state.
    play_state: str

    #: `Animation`'s playback rate.
    playback_rate: float

    #: `Animation`'s start time.
    start_time: float

    #: `Animation`'s current time.
    current_time: float

    #: Animation type of `Animation`.
    type_: str

    #: `Animation`'s source animation node.
    source: AnimationEffect

    #: A unique ID for `Animation` representing the sources that triggered this CSS
    #: animation/transition.
    css_id: str

    @classmethod
    def from_response(cls, response):
        return cls(
            id=str(response.get('id')),
            name=str(response.get('name')),
            paused_state=bool(response.get('pausedState')),
            play_state=str(response.get('playState')),
            playback_rate=float(response.get('playbackRate')),
            start_time=float(response.get('startTime')),
            current_time=float(response.get('currentTime')),
            type_=str(response.get('type')),
            source=AnimationEffect.from_response(response.get('source')),
            css_id=str(response.get('cssId')),
        )

