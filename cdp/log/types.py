'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: log
Experimental: False
'''

from dataclasses import dataclass, field
import typing

from ..network import types as network
from ..runtime import types as runtime



@dataclass
class LogEntry:
    '''
    Log entry.
    '''
    #: Log entry source.
    source: str

    #: Log entry severity.
    level: str

    #: Logged text.
    text: str

    #: Timestamp when this entry was added.
    timestamp: runtime.Timestamp

    #: URL of the resource if known.
    url: str

    #: Line number in the resource.
    line_number: int

    #: JavaScript stack trace.
    stack_trace: runtime.StackTrace

    #: Identifier of the network request associated with this entry.
    network_request_id: network.RequestId

    #: Identifier of the worker associated with this entry.
    worker_id: str

    #: Call arguments.
    args: typing.List['Runtime.RemoteObject']

    @classmethod
    def from_response(cls, response):
        return cls(
            source=str(response.get('source')),
            level=str(response.get('level')),
            text=str(response.get('text')),
            timestamp=runtime.Timestamp.from_response(response.get('timestamp')),
            url=str(response.get('url')),
            line_number=int(response.get('lineNumber')),
            stack_trace=runtime.StackTrace.from_response(response.get('stackTrace')),
            network_request_id=network.RequestId.from_response(response.get('networkRequestId')),
            worker_id=str(response.get('workerId')),
            args=[runtime.RemoteObject.from_response(i) for i in response.get('args')],
        )


@dataclass
class ViolationSetting:
    '''
    Violation configuration setting.
    '''
    #: Violation type.
    name: str

    #: Time threshold to trigger upon.
    threshold: float

    @classmethod
    def from_response(cls, response):
        return cls(
            name=str(response.get('name')),
            threshold=float(response.get('threshold')),
        )

