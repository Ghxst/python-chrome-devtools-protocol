'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: indexed_db
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *


def clear_object_store(
        security_origin: str,
        database_name: str,
        object_store_name: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Clears all entries from an object store.
    
    :param security_origin: Security origin.
    :param database_name: Database name.
    :param object_store_name: Object store name.
    '''
    params: T_JSON_DICT = {
        'securityOrigin': security_origin,
        'databaseName': database_name,
        'objectStoreName': object_store_name,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'IndexedDB.clearObjectStore',
        'params': params,
    }
    json = yield cmd_dict


def delete_database(
        security_origin: str,
        database_name: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Deletes a database.
    
    :param security_origin: Security origin.
    :param database_name: Database name.
    '''
    params: T_JSON_DICT = {
        'securityOrigin': security_origin,
        'databaseName': database_name,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'IndexedDB.deleteDatabase',
        'params': params,
    }
    json = yield cmd_dict


def delete_object_store_entries(
        security_origin: str,
        database_name: str,
        object_store_name: str,
        key_range: KeyRange,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Delete a range of entries from an object store
    
    :param security_origin: 
    :param database_name: 
    :param object_store_name: 
    :param key_range: Range of entry keys to delete
    '''
    params: T_JSON_DICT = {
        'securityOrigin': security_origin,
        'databaseName': database_name,
        'objectStoreName': object_store_name,
        'keyRange': key_range.to_json(),
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'IndexedDB.deleteObjectStoreEntries',
        'params': params,
    }
    json = yield cmd_dict


def disable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Disables events from backend.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'IndexedDB.disable',
    }
    json = yield cmd_dict


def enable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Enables events from backend.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'IndexedDB.enable',
    }
    json = yield cmd_dict


def request_data(
        security_origin: str,
        database_name: str,
        object_store_name: str,
        index_name: str,
        skip_count: int,
        page_size: int,
        key_range: typing.Optional[KeyRange] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,dict]:
    '''
    Requests data from object store or index.
    
    :param security_origin: Security origin.
    :param database_name: Database name.
    :param object_store_name: Object store name.
    :param index_name: Index name, empty string for object store data requests.
    :param skip_count: Number of records to skip.
    :param page_size: Number of records to fetch.
    :param key_range: Key range.
    :returns: a dict with the following keys:
        * objectStoreDataEntries: Array of object store data entries.
        * hasMore: If true, there are more entries to fetch in the given range.
    '''
    params: T_JSON_DICT = {
        'securityOrigin': security_origin,
        'databaseName': database_name,
        'objectStoreName': object_store_name,
        'indexName': index_name,
        'skipCount': skip_count,
        'pageSize': page_size,
    }
    if key_range is not None:
        params['keyRange'] = key_range.to_json()
    cmd_dict: T_JSON_DICT = {
        'method': 'IndexedDB.requestData',
        'params': params,
    }
    json = yield cmd_dict
    result: T_JSON_DICT = {
        'objectStoreDataEntries': [DataEntry.from_json(i) for i in json['objectStoreDataEntries']],
        'hasMore': bool(json['hasMore']),
    }
    return result


def get_metadata(
        security_origin: str,
        database_name: str,
        object_store_name: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,dict]:
    '''
    Gets metadata of an object store
    
    :param security_origin: Security origin.
    :param database_name: Database name.
    :param object_store_name: Object store name.
    :returns: a dict with the following keys:
        * entriesCount: the entries count
        * keyGeneratorValue: the current value of key generator, to become the next inserted
    key into the object store. Valid if objectStore.autoIncrement
    is true.
    '''
    params: T_JSON_DICT = {
        'securityOrigin': security_origin,
        'databaseName': database_name,
        'objectStoreName': object_store_name,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'IndexedDB.getMetadata',
        'params': params,
    }
    json = yield cmd_dict
    result: T_JSON_DICT = {
        'entriesCount': float(json['entriesCount']),
        'keyGeneratorValue': float(json['keyGeneratorValue']),
    }
    return result


def request_database(
        security_origin: str,
        database_name: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,DatabaseWithObjectStores]:
    '''
    Requests database with given name in given frame.
    
    :param security_origin: Security origin.
    :param database_name: Database name.
    :returns: Database with an array of object stores.
    '''
    params: T_JSON_DICT = {
        'securityOrigin': security_origin,
        'databaseName': database_name,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'IndexedDB.requestDatabase',
        'params': params,
    }
    json = yield cmd_dict
    return DatabaseWithObjectStores.from_json(json['databaseWithObjectStores'])


def request_database_names(
        security_origin: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,typing.List['str']]:
    '''
    Requests database names for given security origin.
    
    :param security_origin: Security origin.
    :returns: Database names for origin.
    '''
    params: T_JSON_DICT = {
        'securityOrigin': security_origin,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'IndexedDB.requestDatabaseNames',
        'params': params,
    }
    json = yield cmd_dict
    return [str(i) for i in json['databaseNames']]


