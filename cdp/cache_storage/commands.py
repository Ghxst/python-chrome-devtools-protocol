'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: cache_storage
Experimental: True
'''

from dataclasses import dataclass, field
import typing

from .types import *


class CacheStorage:
    @staticmethod
    def delete_cache(cache_id: CacheId) -> None:
        '''
        Deletes a cache.
        
        :param cache_id: Id of cache for deletion.
        '''

        cmd_dict = {
            'method': 'CacheStorage.deleteCache',
            'params': {
                'cacheId': cache_id,
            }
        }
        response = yield cmd_dict

    @staticmethod
    def delete_entry(cache_id: CacheId, request: str) -> None:
        '''
        Deletes a cache entry.
        
        :param cache_id: Id of cache where the entry will be deleted.
        :param request: URL spec of the request.
        '''

        cmd_dict = {
            'method': 'CacheStorage.deleteEntry',
            'params': {
                'cacheId': cache_id,
                'request': request,
            }
        }
        response = yield cmd_dict

    @staticmethod
    def request_cache_names(security_origin: str) -> typing.List['Cache']:
        '''
        Requests cache names.
        
        :param security_origin: Security origin.
        :returns: Caches for the security origin.
        '''

        cmd_dict = {
            'method': 'CacheStorage.requestCacheNames',
            'params': {
                'securityOrigin': security_origin,
            }
        }
        response = yield cmd_dict
        return [Cache.from_response(i) for i in response['caches']]

    @staticmethod
    def request_cached_response(cache_id: CacheId, request_url: str, request_headers: typing.List['Header']) -> CachedResponse:
        '''
        Fetches cache entry.
        
        :param cache_id: Id of cache that contains the entry.
        :param request_url: URL spec of the request.
        :param request_headers: headers of the request.
        :returns: Response read from the cache.
        '''

        cmd_dict = {
            'method': 'CacheStorage.requestCachedResponse',
            'params': {
                'cacheId': cache_id,
                'requestURL': request_url,
                'requestHeaders': request_headers,
            }
        }
        response = yield cmd_dict
        return CachedResponse.from_response(response['response'])

    @staticmethod
    def request_entries(cache_id: CacheId, skip_count: int, page_size: int, path_filter: str) -> dict:
        '''
        Requests data from cache.
        
        :param cache_id: ID of cache to get entries from.
        :param skip_count: Number of records to skip.
        :param page_size: Number of records to fetch.
        :param path_filter: If present, only return the entries containing this substring in the path
        :returns: a dict with the following keys:
            * cacheDataEntries: Array of object store data entries.
            * returnCount: Count of returned entries from this storage. If pathFilter is empty, it
        is the count of all entries from this storage.
        '''

        cmd_dict = {
            'method': 'CacheStorage.requestEntries',
            'params': {
                'cacheId': cache_id,
                'skipCount': skip_count,
                'pageSize': page_size,
                'pathFilter': path_filter,
            }
        }
        response = yield cmd_dict
        return {
                'cacheDataEntries': [DataEntry.from_response(i) for i in response['cacheDataEntries']],
                'returnCount': float.from_response(response['returnCount']),
            }

