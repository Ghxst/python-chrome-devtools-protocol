'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: cache_storage
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing


class CacheId(str):
    '''
    Unique identifier of the Cache object.
    '''
    def to_json(self) -> str:
        return self

    @classmethod
    def from_json(cls, json: str) -> 'CacheId':
        return cls(json)

    def __repr__(self):
        return 'CacheId({})'.format(str.__repr__(self))


class CachedResponseType(enum.Enum):
    '''
    type of HTTP response cached
    '''
    BASIC = "basic"
    CORS = "cors"
    DEFAULT = "default"
    ERROR = "error"
    OPAQUE_RESPONSE = "opaqueResponse"
    OPAQUE_REDIRECT = "opaqueRedirect"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> 'CachedResponseType':
        return cls(json)


@dataclass
class DataEntry:
    '''
    Data entry.
    '''
    #: Request URL.
    request_url: str

    #: Request method.
    request_method: str

    #: Request headers
    request_headers: typing.List['Header']

    #: Number of seconds since epoch.
    response_time: float

    #: HTTP response status code.
    response_status: int

    #: HTTP response status text.
    response_status_text: str

    #: HTTP response type
    response_type: CachedResponseType

    #: Response headers
    response_headers: typing.List['Header']

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'requestURL': self.request_url,
            'requestMethod': self.request_method,
            'requestHeaders': [i.to_json() for i in self.request_headers],
            'responseTime': self.response_time,
            'responseStatus': self.response_status,
            'responseStatusText': self.response_status_text,
            'responseType': self.response_type.to_json(),
            'responseHeaders': [i.to_json() for i in self.response_headers],
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'DataEntry':
        return cls(
            request_url=json['requestURL'],
            request_method=json['requestMethod'],
            request_headers=[Header.from_json(i) for i in json['requestHeaders']],
            response_time=json['responseTime'],
            response_status=json['responseStatus'],
            response_status_text=json['responseStatusText'],
            response_type=CachedResponseType.from_json(json['responseType']),
            response_headers=[Header.from_json(i) for i in json['responseHeaders']],
        )

@dataclass
class Cache:
    '''
    Cache identifier.
    '''
    #: An opaque unique id of the cache.
    cache_id: CacheId

    #: Security origin of the cache.
    security_origin: str

    #: The name of the cache.
    cache_name: str

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'cacheId': self.cache_id.to_json(),
            'securityOrigin': self.security_origin,
            'cacheName': self.cache_name,
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'Cache':
        return cls(
            cache_id=CacheId.from_json(json['cacheId']),
            security_origin=json['securityOrigin'],
            cache_name=json['cacheName'],
        )

@dataclass
class Header:
    name: str

    value: str

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'name': self.name,
            'value': self.value,
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'Header':
        return cls(
            name=json['name'],
            value=json['value'],
        )

@dataclass
class CachedResponse:
    '''
    Cached response
    '''
    #: Entry content, base64-encoded.
    body: str

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'body': self.body,
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'CachedResponse':
        return cls(
            body=json['body'],
        )

