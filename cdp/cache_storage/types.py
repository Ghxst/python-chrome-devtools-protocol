'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: cache_storage
Experimental: True
'''

from dataclasses import dataclass, field
import typing


class CacheId(str):
    '''
    Unique identifier of the Cache object.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'CacheId({})'.format(str.__repr__(self))



class CachedResponseType:
    '''
    type of HTTP response cached
    '''
    BASIC = "basic"
    CORS = "cors"
    DEFAULT = "default"
    ERROR = "error"
    OPAQUE_RESPONSE = "opaqueResponse"
    OPAQUE_REDIRECT = "opaqueRedirect"


@dataclass
class DataEntry:
    '''
    Data entry.
    '''
    #: Request URL.
    request_url: str

    #: Request method.
    request_method: str

    #: Request headers
    request_headers: typing.List['Header']

    #: Number of seconds since epoch.
    response_time: float

    #: HTTP response status code.
    response_status: int

    #: HTTP response status text.
    response_status_text: str

    #: HTTP response type
    response_type: CachedResponseType

    #: Response headers
    response_headers: typing.List['Header']

    @classmethod
    def from_response(cls, response):
        return cls(
            request_url=str(response.get('requestURL')),
            request_method=str(response.get('requestMethod')),
            request_headers=[Header.from_response(i) for i in response.get('requestHeaders')],
            response_time=float(response.get('responseTime')),
            response_status=int(response.get('responseStatus')),
            response_status_text=str(response.get('responseStatusText')),
            response_type=CachedResponseType.from_response(response.get('responseType')),
            response_headers=[Header.from_response(i) for i in response.get('responseHeaders')],
        )


@dataclass
class Cache:
    '''
    Cache identifier.
    '''
    #: An opaque unique id of the cache.
    cache_id: CacheId

    #: Security origin of the cache.
    security_origin: str

    #: The name of the cache.
    cache_name: str

    @classmethod
    def from_response(cls, response):
        return cls(
            cache_id=CacheId.from_response(response.get('cacheId')),
            security_origin=str(response.get('securityOrigin')),
            cache_name=str(response.get('cacheName')),
        )


@dataclass
class Header:
    name: str

    value: str

    @classmethod
    def from_response(cls, response):
        return cls(
            name=str(response.get('name')),
            value=str(response.get('value')),
        )


@dataclass
class CachedResponse:
    '''
    Cached response
    '''
    #: Entry content, base64-encoded.
    body: str

    @classmethod
    def from_response(cls, response):
        return cls(
            body=str(response.get('body')),
        )

