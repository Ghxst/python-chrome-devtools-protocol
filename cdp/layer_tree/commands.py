'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: layer_tree
Experimental: True
'''

from dataclasses import dataclass, field
import typing

from .types import *
from ..dom import types as dom



def compositing_reasons(layer_id: LayerId) -> typing.Generator[dict,dict,typing.List]:
    '''
    Provides the reasons why the given layer was composited.
    
    :param layer_id: The id of the layer for which we want to get the reasons it was composited.
    :returns: A list of strings specifying reasons for the given layer to become composited.
    '''

    cmd_dict = {
        'method': 'LayerTree.compositingReasons',
        'params': {
            'layerId': layer_id,
        }
    }
    response = yield cmd_dict
    return [str(i) for i in response['compositingReasons']]


def disable() -> typing.Generator[dict,dict,None]:
    '''
    Disables compositing tree inspection.
    '''

    cmd_dict = {
        'method': 'LayerTree.disable',
    }
    response = yield cmd_dict


def enable() -> typing.Generator[dict,dict,None]:
    '''
    Enables compositing tree inspection.
    '''

    cmd_dict = {
        'method': 'LayerTree.enable',
    }
    response = yield cmd_dict


def load_snapshot(tiles: typing.List['PictureTile']) -> typing.Generator[dict,dict,SnapshotId]:
    '''
    Returns the snapshot identifier.
    
    :param tiles: An array of tiles composing the snapshot.
    :returns: The id of the snapshot.
    '''

    cmd_dict = {
        'method': 'LayerTree.loadSnapshot',
        'params': {
            'tiles': tiles,
        }
    }
    response = yield cmd_dict
    return SnapshotId.from_response(response['snapshotId'])


def make_snapshot(layer_id: LayerId) -> typing.Generator[dict,dict,SnapshotId]:
    '''
    Returns the layer snapshot identifier.
    
    :param layer_id: The id of the layer.
    :returns: The id of the layer snapshot.
    '''

    cmd_dict = {
        'method': 'LayerTree.makeSnapshot',
        'params': {
            'layerId': layer_id,
        }
    }
    response = yield cmd_dict
    return SnapshotId.from_response(response['snapshotId'])


def profile_snapshot(snapshot_id: SnapshotId, min_repeat_count: int, min_duration: float, clip_rect: dom.Rect) -> typing.Generator[dict,dict,typing.List['PaintProfile']]:
    '''
    
    
    :param snapshot_id: The id of the layer snapshot.
    :param min_repeat_count: The maximum number of times to replay the snapshot (1, if not specified).
    :param min_duration: The minimum duration (in seconds) to replay the snapshot.
    :param clip_rect: The clip rectangle to apply when replaying the snapshot.
    :returns: The array of paint profiles, one per run.
    '''

    cmd_dict = {
        'method': 'LayerTree.profileSnapshot',
        'params': {
            'snapshotId': snapshot_id,
            'minRepeatCount': min_repeat_count,
            'minDuration': min_duration,
            'clipRect': clip_rect,
        }
    }
    response = yield cmd_dict
    return [PaintProfile.from_response(i) for i in response['timings']]


def release_snapshot(snapshot_id: SnapshotId) -> typing.Generator[dict,dict,None]:
    '''
    Releases layer snapshot captured by the back-end.
    
    :param snapshot_id: The id of the layer snapshot.
    '''

    cmd_dict = {
        'method': 'LayerTree.releaseSnapshot',
        'params': {
            'snapshotId': snapshot_id,
        }
    }
    response = yield cmd_dict


def replay_snapshot(snapshot_id: SnapshotId, from_step: int, to_step: int, scale: float) -> typing.Generator[dict,dict,str]:
    '''
    Replays the layer snapshot and returns the resulting bitmap.
    
    :param snapshot_id: The id of the layer snapshot.
    :param from_step: The first step to replay from (replay from the very start if not specified).
    :param to_step: The last step to replay to (replay till the end if not specified).
    :param scale: The scale to apply while replaying (defaults to 1).
    :returns: A data: URL for resulting image.
    '''

    cmd_dict = {
        'method': 'LayerTree.replaySnapshot',
        'params': {
            'snapshotId': snapshot_id,
            'fromStep': from_step,
            'toStep': to_step,
            'scale': scale,
        }
    }
    response = yield cmd_dict
    return str(response['dataURL'])


def snapshot_command_log(snapshot_id: SnapshotId) -> typing.Generator[dict,dict,typing.List]:
    '''
    Replays the layer snapshot and returns canvas log.
    
    :param snapshot_id: The id of the layer snapshot.
    :returns: The array of canvas function calls.
    '''

    cmd_dict = {
        'method': 'LayerTree.snapshotCommandLog',
        'params': {
            'snapshotId': snapshot_id,
        }
    }
    response = yield cmd_dict
    return [dict(i) for i in response['commandLog']]


