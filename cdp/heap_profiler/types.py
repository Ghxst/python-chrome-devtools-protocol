'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: heap_profiler
Experimental: True
'''

from dataclasses import dataclass, field
import typing

from ..runtime import types as runtime


class HeapSnapshotObjectId(str):
    '''
    Heap snapshot object id.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'HeapSnapshotObjectId({})'.format(str.__repr__(self))



@dataclass
class SamplingHeapProfileNode:
    '''
    Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.
    '''
    #: Function location.
    call_frame: runtime.CallFrame

    #: Allocations size in bytes for the node excluding children.
    self_size: float

    #: Node id. Ids are unique across all profiles collected between startSampling and stopSampling.
    id: int

    #: Child nodes.
    children: typing.List['SamplingHeapProfileNode']

    @classmethod
    def from_response(cls, response):
        return cls(
            call_frame=runtime.CallFrame.from_response(response.get('callFrame')),
            self_size=float(response.get('selfSize')),
            id=int(response.get('id')),
            children=[SamplingHeapProfileNode.from_response(i) for i in response.get('children')],
        )


@dataclass
class SamplingHeapProfileSample:
    '''
    A single sample from a sampling profile.
    '''
    #: Allocation size in bytes attributed to the sample.
    size: float

    #: Id of the corresponding profile tree node.
    node_id: int

    #: Time-ordered sample ordinal number. It is unique across all profiles retrieved
    #: between startSampling and stopSampling.
    ordinal: float

    @classmethod
    def from_response(cls, response):
        return cls(
            size=float(response.get('size')),
            node_id=int(response.get('nodeId')),
            ordinal=float(response.get('ordinal')),
        )


@dataclass
class SamplingHeapProfile:
    '''
    Sampling profile.
    '''
    head: SamplingHeapProfileNode

    samples: typing.List['SamplingHeapProfileSample']

    @classmethod
    def from_response(cls, response):
        return cls(
            head=SamplingHeapProfileNode.from_response(response.get('head')),
            samples=[SamplingHeapProfileSample.from_response(i) for i in response.get('samples')],
        )

