'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: heap_profiler
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from ..runtime import types as runtime


class HeapSnapshotObjectId(str):
    '''
    Heap snapshot object id.
    '''
    def to_json(self) -> str:
        return self

    @classmethod
    def from_json(cls, json: str) -> 'HeapSnapshotObjectId':
        return cls(json)

    def __repr__(self):
        return 'HeapSnapshotObjectId({})'.format(str.__repr__(self))


@dataclass
class SamplingHeapProfileNode:
    '''
    Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.
    '''
    #: Function location.
    call_frame: runtime.CallFrame

    #: Allocations size in bytes for the node excluding children.
    self_size: float

    #: Node id. Ids are unique across all profiles collected between startSampling and stopSampling.
    id: int

    #: Child nodes.
    children: typing.List['SamplingHeapProfileNode']

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'callFrame': self.call_frame.to_json(),
            'selfSize': self.self_size,
            'id': self.id,
            'children': [i.to_json() for i in self.children],
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'SamplingHeapProfileNode':
        return cls(
            call_frame=runtime.CallFrame.from_json(json['callFrame']),
            self_size=json['selfSize'],
            id=json['id'],
            children=[SamplingHeapProfileNode.from_json(i) for i in json['children']],
        )

@dataclass
class SamplingHeapProfileSample:
    '''
    A single sample from a sampling profile.
    '''
    #: Allocation size in bytes attributed to the sample.
    size: float

    #: Id of the corresponding profile tree node.
    node_id: int

    #: Time-ordered sample ordinal number. It is unique across all profiles retrieved
    #: between startSampling and stopSampling.
    ordinal: float

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'size': self.size,
            'nodeId': self.node_id,
            'ordinal': self.ordinal,
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'SamplingHeapProfileSample':
        return cls(
            size=json['size'],
            node_id=json['nodeId'],
            ordinal=json['ordinal'],
        )

@dataclass
class SamplingHeapProfile:
    '''
    Sampling profile.
    '''
    head: SamplingHeapProfileNode

    samples: typing.List['SamplingHeapProfileSample']

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'head': self.head.to_json(),
            'samples': [i.to_json() for i in self.samples],
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'SamplingHeapProfile':
        return cls(
            head=SamplingHeapProfileNode.from_json(json['head']),
            samples=[SamplingHeapProfileSample.from_json(i) for i in json['samples']],
        )

