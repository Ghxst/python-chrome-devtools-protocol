'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: heap_profiler
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *


@dataclass
class AddHeapSnapshotChunk:
    chunk: str

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'HeapProfiler'
    _method = 'addHeapSnapshotChunk'

    @classmethod
    def from_json(cls, json: dict) -> 'AddHeapSnapshotChunk':
        return cls(
            chunk=str(json['chunk']),
        )


@dataclass
class HeapStatsUpdate:
    '''
    If heap objects tracking has been started then backend may send update for one or more fragments
    '''
    #: If heap objects tracking has been started then backend may send update for one or more fragments
    stats_update: typing.List['int']

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'HeapProfiler'
    _method = 'heapStatsUpdate'

    @classmethod
    def from_json(cls, json: dict) -> 'HeapStatsUpdate':
        return cls(
            stats_update=[int(i) for i in json['statsUpdate']],
        )


@dataclass
class LastSeenObjectId:
    '''
    If heap objects tracking has been started then backend regularly sends a current value for last
    seen object id and corresponding timestamp. If the were changes in the heap since last event
    then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
    '''
    #: If heap objects tracking has been started then backend regularly sends a current value for last
    #: seen object id and corresponding timestamp. If the were changes in the heap since last event
    #: then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
    last_seen_object_id: int

    #: If heap objects tracking has been started then backend regularly sends a current value for last
    #: seen object id and corresponding timestamp. If the were changes in the heap since last event
    #: then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
    timestamp: float

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'HeapProfiler'
    _method = 'lastSeenObjectId'

    @classmethod
    def from_json(cls, json: dict) -> 'LastSeenObjectId':
        return cls(
            last_seen_object_id=int(json['lastSeenObjectId']),
            timestamp=float(json['timestamp']),
        )


@dataclass
class ReportHeapSnapshotProgress:
    done: int

    total: int

    finished: bool

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'HeapProfiler'
    _method = 'reportHeapSnapshotProgress'

    @classmethod
    def from_json(cls, json: dict) -> 'ReportHeapSnapshotProgress':
        return cls(
            done=int(json['done']),
            total=int(json['total']),
            finished=bool(json['finished']),
        )


@dataclass
class ResetProfiles:
    # These fields are used for internal purposes and are not part of CDP
    _domain = 'HeapProfiler'
    _method = 'resetProfiles'

    @classmethod
    def from_json(cls, json: dict) -> 'ResetProfiles':
        return cls(
        )

