'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: dom_debugger
Experimental: False
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from ..dom import types as dom
from ..runtime import types as runtime


class DOMBreakpointType(enum.Enum):
    '''
    DOM breakpoint type.
    '''
    SUBTREE_MODIFIED = "subtree-modified"
    ATTRIBUTE_MODIFIED = "attribute-modified"
    NODE_REMOVED = "node-removed"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> 'DOMBreakpointType':
        return cls(json)


@dataclass
class EventListener:
    '''
    Object event listener.
    '''
    #: `EventListener`'s type.
    type: str

    #: `EventListener`'s useCapture.
    use_capture: bool

    #: `EventListener`'s passive flag.
    passive: bool

    #: `EventListener`'s once flag.
    once: bool

    #: Script id of the handler code.
    script_id: runtime.ScriptId

    #: Line number in the script (0-based).
    line_number: int

    #: Column number in the script (0-based).
    column_number: int

    #: Event handler function value.
    handler: typing.Optional[runtime.RemoteObject] = None

    #: Event original handler function value.
    original_handler: typing.Optional[runtime.RemoteObject] = None

    #: Node the listener is added to (if any).
    backend_node_id: typing.Optional[dom.BackendNodeId] = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'type': self.type,
            'useCapture': self.use_capture,
            'passive': self.passive,
            'once': self.once,
            'scriptId': self.script_id.to_json(),
            'lineNumber': self.line_number,
            'columnNumber': self.column_number,
        }
        if self.handler is not None:
            json['handler'] = self.handler.to_json()
        if self.original_handler is not None:
            json['originalHandler'] = self.original_handler.to_json()
        if self.backend_node_id is not None:
            json['backendNodeId'] = self.backend_node_id.to_json()
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'EventListener':
        handler = runtime.RemoteObject.from_json(json['handler']) if 'handler' in json else None
        original_handler = runtime.RemoteObject.from_json(json['originalHandler']) if 'originalHandler' in json else None
        backend_node_id = dom.BackendNodeId.from_json(json['backendNodeId']) if 'backendNodeId' in json else None
        return cls(
            type=json['type'],
            use_capture=json['useCapture'],
            passive=json['passive'],
            once=json['once'],
            script_id=runtime.ScriptId.from_json(json['scriptId']),
            line_number=json['lineNumber'],
            column_number=json['columnNumber'],
            handler=handler,
            original_handler=original_handler,
            backend_node_id=backend_node_id,
        )

