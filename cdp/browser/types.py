'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: browser
Experimental: False
'''

from dataclasses import dataclass, field
import typing


class WindowID(int):
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'WindowID({})'.format(int.__repr__(self))



class WindowState:
    '''
    The state of the browser window.
    '''
    NORMAL = "normal"
    MINIMIZED = "minimized"
    MAXIMIZED = "maximized"
    FULLSCREEN = "fullscreen"


class PermissionType:
    ACCESSIBILITY_EVENTS = "accessibilityEvents"
    AUDIO_CAPTURE = "audioCapture"
    BACKGROUND_SYNC = "backgroundSync"
    BACKGROUND_FETCH = "backgroundFetch"
    CLIPBOARD_READ = "clipboardRead"
    CLIPBOARD_WRITE = "clipboardWrite"
    DURABLE_STORAGE = "durableStorage"
    FLASH = "flash"
    GEOLOCATION = "geolocation"
    MIDI = "midi"
    MIDI_SYSEX = "midiSysex"
    NOTIFICATIONS = "notifications"
    PAYMENT_HANDLER = "paymentHandler"
    PERIODIC_BACKGROUND_SYNC = "periodicBackgroundSync"
    PROTECTED_MEDIA_IDENTIFIER = "protectedMediaIdentifier"
    SENSORS = "sensors"
    VIDEO_CAPTURE = "videoCapture"
    IDLE_DETECTION = "idleDetection"


@dataclass
class Bounds:
    '''
    Browser window bounds information
    '''
    #: The offset from the left edge of the screen to the window in pixels.
    left: int

    #: The offset from the top edge of the screen to the window in pixels.
    top: int

    #: The window width in pixels.
    width: int

    #: The window height in pixels.
    height: int

    #: The window state. Default to normal.
    window_state: WindowState

    @classmethod
    def from_response(cls, response):
        return cls(
            left=int(response.get('left')),
            top=int(response.get('top')),
            width=int(response.get('width')),
            height=int(response.get('height')),
            window_state=WindowState.from_response(response.get('windowState')),
        )


@dataclass
class Bucket:
    '''
    Chrome histogram bucket.
    '''
    #: Minimum value (inclusive).
    low: int

    #: Maximum value (exclusive).
    high: int

    #: Number of samples.
    count: int

    @classmethod
    def from_response(cls, response):
        return cls(
            low=int(response.get('low')),
            high=int(response.get('high')),
            count=int(response.get('count')),
        )


@dataclass
class Histogram:
    '''
    Chrome histogram.
    '''
    #: Name.
    name: str

    #: Sum of sample values.
    sum: int

    #: Total number of samples.
    count: int

    #: Buckets.
    buckets: typing.List['Bucket']

    @classmethod
    def from_response(cls, response):
        return cls(
            name=str(response.get('name')),
            sum=int(response.get('sum')),
            count=int(response.get('count')),
            buckets=[Bucket.from_response(i) for i in response.get('buckets')],
        )

