'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: browser
Experimental: False
'''

from dataclasses import dataclass, field
import typing

from .types import *
from ..target import types as target



def grant_permissions(origin: str, permissions: typing.List['PermissionType'], browser_context_id: target.BrowserContextID) -> typing.Generator[dict,dict,None]:
    '''
    Grant specific permissions to the given origin and reject all others.
    
    :param origin: 
    :param permissions: 
    :param browser_context_id: BrowserContext to override permissions. When omitted, default browser context is used.
    '''

    cmd_dict = {
        'method': 'Browser.grantPermissions',
        'params': {
            'origin': origin,
            'permissions': permissions,
            'browserContextId': browser_context_id,
        }
    }
    response = yield cmd_dict


def reset_permissions(browser_context_id: target.BrowserContextID) -> typing.Generator[dict,dict,None]:
    '''
    Reset all permission management for all origins.
    
    :param browser_context_id: BrowserContext to reset permissions. When omitted, default browser context is used.
    '''

    cmd_dict = {
        'method': 'Browser.resetPermissions',
        'params': {
            'browserContextId': browser_context_id,
        }
    }
    response = yield cmd_dict


def close() -> typing.Generator[dict,dict,None]:
    '''
    Close browser gracefully.
    '''

    cmd_dict = {
        'method': 'Browser.close',
    }
    response = yield cmd_dict


def crash() -> typing.Generator[dict,dict,None]:
    '''
    Crashes browser on the main thread.
    '''

    cmd_dict = {
        'method': 'Browser.crash',
    }
    response = yield cmd_dict


def crash_gpu_process() -> typing.Generator[dict,dict,None]:
    '''
    Crashes GPU process.
    '''

    cmd_dict = {
        'method': 'Browser.crashGpuProcess',
    }
    response = yield cmd_dict


def get_version() -> typing.Generator[dict,dict,dict]:
    '''
    Returns version information.
    :returns: a dict with the following keys:
        * protocolVersion: Protocol version.
        * product: Product name.
        * revision: Product revision.
        * userAgent: User-Agent.
        * jsVersion: V8 version.
    '''

    cmd_dict = {
        'method': 'Browser.getVersion',
    }
    response = yield cmd_dict
    return {
        'protocolVersion': str(response['protocolVersion']),
        'product': str(response['product']),
        'revision': str(response['revision']),
        'userAgent': str(response['userAgent']),
        'jsVersion': str(response['jsVersion']),
    }


def get_browser_command_line() -> typing.Generator[dict,dict,typing.List]:
    '''
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.
    :returns: Commandline parameters
    '''

    cmd_dict = {
        'method': 'Browser.getBrowserCommandLine',
    }
    response = yield cmd_dict
    return [str(i) for i in response['arguments']]


def get_histograms(query: str, delta: bool) -> typing.Generator[dict,dict,typing.List['Histogram']]:
    '''
    Get Chrome histograms.
    
    :param query: Requested substring in name. Only histograms which have query as a
    substring in their name are extracted. An empty or absent query returns
    all histograms.
    :param delta: If true, retrieve delta since last call.
    :returns: Histograms.
    '''

    cmd_dict = {
        'method': 'Browser.getHistograms',
        'params': {
            'query': query,
            'delta': delta,
        }
    }
    response = yield cmd_dict
    return [Histogram.from_response(i) for i in response['histograms']]


def get_histogram(name: str, delta: bool) -> typing.Generator[dict,dict,Histogram]:
    '''
    Get a Chrome histogram by name.
    
    :param name: Requested histogram name.
    :param delta: If true, retrieve delta since last call.
    :returns: Histogram.
    '''

    cmd_dict = {
        'method': 'Browser.getHistogram',
        'params': {
            'name': name,
            'delta': delta,
        }
    }
    response = yield cmd_dict
    return Histogram.from_response(response['histogram'])


def get_window_bounds(window_id: WindowID) -> typing.Generator[dict,dict,Bounds]:
    '''
    Get position and size of the browser window.
    
    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window
    position and size are returned.
    '''

    cmd_dict = {
        'method': 'Browser.getWindowBounds',
        'params': {
            'windowId': window_id,
        }
    }
    response = yield cmd_dict
    return Bounds.from_response(response['bounds'])


def get_window_for_target(target_id: target.TargetID) -> typing.Generator[dict,dict,dict]:
    '''
    Get the browser window that contains the devtools target.
    
    :param target_id: Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: a dict with the following keys:
        * windowId: Browser window id.
        * bounds: Bounds information of the window. When window state is 'minimized', the restored window
    position and size are returned.
    '''

    cmd_dict = {
        'method': 'Browser.getWindowForTarget',
        'params': {
            'targetId': target_id,
        }
    }
    response = yield cmd_dict
    return {
        'windowId': WindowID.from_response(response['windowId']),
        'bounds': Bounds.from_response(response['bounds']),
    }


def set_window_bounds(window_id: WindowID, bounds: Bounds) -> typing.Generator[dict,dict,None]:
    '''
    Set position and/or size of the browser window.
    
    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined
    with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    '''

    cmd_dict = {
        'method': 'Browser.setWindowBounds',
        'params': {
            'windowId': window_id,
            'bounds': bounds,
        }
    }
    response = yield cmd_dict


def set_dock_tile(badge_label: str, image: str) -> typing.Generator[dict,dict,None]:
    '''
    Set dock tile details, platform-specific.
    
    :param badge_label: 
    :param image: Png encoded image.
    '''

    cmd_dict = {
        'method': 'Browser.setDockTile',
        'params': {
            'badgeLabel': badge_label,
            'image': image,
        }
    }
    response = yield cmd_dict


