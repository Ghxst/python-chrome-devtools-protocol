'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: browser
Experimental: False
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *
from ..target import types as target



def grant_permissions(
        origin: str,
        permissions: typing.List['PermissionType'],
        browser_context_id: typing.Optional[target.BrowserContextID] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Grant specific permissions to the given origin and reject all others.
    
    :param origin: 
    :param permissions: 
    :param browser_context_id: BrowserContext to override permissions. When omitted, default browser context is used.
    '''
    params: T_JSON_DICT = {
        'origin': origin,
        'permissions': [i.to_json() for i in permissions],
    }
    if browser_context_id is not None:
        params['browserContextId'] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.grantPermissions',
        'params': params,
    }
    json = yield cmd_dict


def reset_permissions(
        browser_context_id: typing.Optional[target.BrowserContextID] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Reset all permission management for all origins.
    
    :param browser_context_id: BrowserContext to reset permissions. When omitted, default browser context is used.
    '''
    params: T_JSON_DICT = {
    }
    if browser_context_id is not None:
        params['browserContextId'] = browser_context_id.to_json()
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.resetPermissions',
        'params': params,
    }
    json = yield cmd_dict


def close() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Close browser gracefully.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.close',
    }
    json = yield cmd_dict


def crash() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Crashes browser on the main thread.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.crash',
    }
    json = yield cmd_dict


def crash_gpu_process() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Crashes GPU process.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.crashGpuProcess',
    }
    json = yield cmd_dict


def get_version() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,dict]:
    '''
    Returns version information.
    :returns: a dict with the following keys:
        * protocolVersion: Protocol version.
        * product: Product name.
        * revision: Product revision.
        * userAgent: User-Agent.
        * jsVersion: V8 version.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.getVersion',
    }
    json = yield cmd_dict
    result: T_JSON_DICT = {
        'protocolVersion': str(json['protocolVersion']),
        'product': str(json['product']),
        'revision': str(json['revision']),
        'userAgent': str(json['userAgent']),
        'jsVersion': str(json['jsVersion']),
    }
    return result


def get_browser_command_line() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,typing.List['str']]:
    '''
    Returns the command line switches for the browser process if, and only if
    --enable-automation is on the commandline.
    :returns: Commandline parameters
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.getBrowserCommandLine',
    }
    json = yield cmd_dict
    return [str(i) for i in json['arguments']]


def get_histograms(
        query: typing.Optional[str] = None,
        delta: typing.Optional[bool] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,typing.List['Histogram']]:
    '''
    Get Chrome histograms.
    
    :param query: Requested substring in name. Only histograms which have query as a
    substring in their name are extracted. An empty or absent query returns
    all histograms.
    :param delta: If true, retrieve delta since last call.
    :returns: Histograms.
    '''
    params: T_JSON_DICT = {
    }
    if query is not None:
        params['query'] = query
    if delta is not None:
        params['delta'] = delta
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.getHistograms',
        'params': params,
    }
    json = yield cmd_dict
    return [Histogram.from_json(i) for i in json['histograms']]


def get_histogram(
        name: str,
        delta: typing.Optional[bool] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,Histogram]:
    '''
    Get a Chrome histogram by name.
    
    :param name: Requested histogram name.
    :param delta: If true, retrieve delta since last call.
    :returns: Histogram.
    '''
    params: T_JSON_DICT = {
        'name': name,
    }
    if delta is not None:
        params['delta'] = delta
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.getHistogram',
        'params': params,
    }
    json = yield cmd_dict
    return Histogram.from_json(json['histogram'])


def get_window_bounds(
        window_id: WindowID,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,Bounds]:
    '''
    Get position and size of the browser window.
    
    :param window_id: Browser window id.
    :returns: Bounds information of the window. When window state is 'minimized', the restored window
    position and size are returned.
    '''
    params: T_JSON_DICT = {
        'windowId': window_id.to_json(),
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.getWindowBounds',
        'params': params,
    }
    json = yield cmd_dict
    return Bounds.from_json(json['bounds'])


def get_window_for_target(
        target_id: typing.Optional[target.TargetID] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,dict]:
    '''
    Get the browser window that contains the devtools target.
    
    :param target_id: Devtools agent host id. If called as a part of the session, associated targetId is used.
    :returns: a dict with the following keys:
        * windowId: Browser window id.
        * bounds: Bounds information of the window. When window state is 'minimized', the restored window
    position and size are returned.
    '''
    params: T_JSON_DICT = {
    }
    if target_id is not None:
        params['targetId'] = target_id.to_json()
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.getWindowForTarget',
        'params': params,
    }
    json = yield cmd_dict
    result: T_JSON_DICT = {
        'windowId': WindowID.from_json(json['windowId']),
        'bounds': Bounds.from_json(json['bounds']),
    }
    return result


def set_window_bounds(
        window_id: WindowID,
        bounds: Bounds,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Set position and/or size of the browser window.
    
    :param window_id: Browser window id.
    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined
    with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
    '''
    params: T_JSON_DICT = {
        'windowId': window_id.to_json(),
        'bounds': bounds.to_json(),
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.setWindowBounds',
        'params': params,
    }
    json = yield cmd_dict


def set_dock_tile(
        badge_label: typing.Optional[str] = None,
        image: typing.Optional[str] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Set dock tile details, platform-specific.
    
    :param badge_label: 
    :param image: Png encoded image.
    '''
    params: T_JSON_DICT = {
    }
    if badge_label is not None:
        params['badgeLabel'] = badge_label
    if image is not None:
        params['image'] = image
    cmd_dict: T_JSON_DICT = {
        'method': 'Browser.setDockTile',
        'params': params,
    }
    json = yield cmd_dict


