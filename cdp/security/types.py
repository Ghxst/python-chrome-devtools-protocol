'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: security
Experimental: False
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing


class CertificateId(int):
    '''
    An internal certificate ID value.
    '''
    def to_json(self) -> int:
        return self

    @classmethod
    def from_json(cls, json: int) -> 'CertificateId':
        return cls(json)

    def __repr__(self):
        return 'CertificateId({})'.format(super().__repr__())


class MixedContentType(enum.Enum):
    '''
    A description of mixed content (HTTP resources on HTTPS pages), as defined by
    https://www.w3.org/TR/mixed-content/#categories
    '''
    BLOCKABLE = "blockable"
    OPTIONALLY_BLOCKABLE = "optionally-blockable"
    NONE = "none"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> 'MixedContentType':
        return cls(json)


class SecurityState(enum.Enum):
    '''
    The security level of a page or resource.
    '''
    UNKNOWN = "unknown"
    NEUTRAL = "neutral"
    INSECURE = "insecure"
    SECURE = "secure"
    INFO = "info"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> 'SecurityState':
        return cls(json)


class CertificateErrorAction(enum.Enum):
    '''
    The action to take when a certificate error occurs. continue will continue processing the
    request and cancel will cancel the request.
    '''
    CONTINUE = "continue"
    CANCEL = "cancel"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> 'CertificateErrorAction':
        return cls(json)


@dataclass
class SecurityStateExplanation:
    '''
    An explanation of an factor contributing to the security state.
    '''
    #: Security state representing the severity of the factor being explained.
    security_state: SecurityState

    #: Title describing the type of factor.
    title: str

    #: Short phrase describing the type of factor.
    summary: str

    #: Full text explanation of the factor.
    description: str

    #: The type of mixed content described by the explanation.
    mixed_content_type: MixedContentType

    #: Page certificate.
    certificate: typing.List['str']

    #: Recommendations to fix any issues.
    recommendations: typing.Optional[typing.List['str']] = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'securityState': self.security_state.to_json(),
            'title': self.title,
            'summary': self.summary,
            'description': self.description,
            'mixedContentType': self.mixed_content_type.to_json(),
            'certificate': [i for i in self.certificate],
        }
        if self.recommendations is not None:
            json['recommendations'] = [i for i in self.recommendations]
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'SecurityStateExplanation':
        recommendations = [i for i in json['recommendations']] if 'recommendations' in json else None
        return cls(
            security_state=SecurityState.from_json(json['securityState']),
            title=json['title'],
            summary=json['summary'],
            description=json['description'],
            mixed_content_type=MixedContentType.from_json(json['mixedContentType']),
            certificate=[i for i in json['certificate']],
            recommendations=recommendations,
        )

@dataclass
class InsecureContentStatus:
    '''
    Information about insecure content on the page.
    '''
    #: Always false.
    ran_mixed_content: bool

    #: Always false.
    displayed_mixed_content: bool

    #: Always false.
    contained_mixed_form: bool

    #: Always false.
    ran_content_with_cert_errors: bool

    #: Always false.
    displayed_content_with_cert_errors: bool

    #: Always set to unknown.
    ran_insecure_content_style: SecurityState

    #: Always set to unknown.
    displayed_insecure_content_style: SecurityState

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'ranMixedContent': self.ran_mixed_content,
            'displayedMixedContent': self.displayed_mixed_content,
            'containedMixedForm': self.contained_mixed_form,
            'ranContentWithCertErrors': self.ran_content_with_cert_errors,
            'displayedContentWithCertErrors': self.displayed_content_with_cert_errors,
            'ranInsecureContentStyle': self.ran_insecure_content_style.to_json(),
            'displayedInsecureContentStyle': self.displayed_insecure_content_style.to_json(),
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'InsecureContentStatus':
        return cls(
            ran_mixed_content=json['ranMixedContent'],
            displayed_mixed_content=json['displayedMixedContent'],
            contained_mixed_form=json['containedMixedForm'],
            ran_content_with_cert_errors=json['ranContentWithCertErrors'],
            displayed_content_with_cert_errors=json['displayedContentWithCertErrors'],
            ran_insecure_content_style=SecurityState.from_json(json['ranInsecureContentStyle']),
            displayed_insecure_content_style=SecurityState.from_json(json['displayedInsecureContentStyle']),
        )

