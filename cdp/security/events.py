'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: security
Experimental: False
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *


@dataclass
class CertificateError:
    '''
    There is a certificate error. If overriding certificate errors is enabled, then it should be
    handled with the `handleCertificateError` command. Note: this event does not fire if the
    certificate error has been allowed internally. Only one client per target should override
    certificate errors at the same time.
    '''
    #: There is a certificate error. If overriding certificate errors is enabled, then it should be
    #: handled with the `handleCertificateError` command. Note: this event does not fire if the
    #: certificate error has been allowed internally. Only one client per target should override
    #: certificate errors at the same time.
    event_id: int

    #: There is a certificate error. If overriding certificate errors is enabled, then it should be
    #: handled with the `handleCertificateError` command. Note: this event does not fire if the
    #: certificate error has been allowed internally. Only one client per target should override
    #: certificate errors at the same time.
    error_type: str

    #: There is a certificate error. If overriding certificate errors is enabled, then it should be
    #: handled with the `handleCertificateError` command. Note: this event does not fire if the
    #: certificate error has been allowed internally. Only one client per target should override
    #: certificate errors at the same time.
    request_url: str

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'Security'
    _method = 'certificateError'

    @classmethod
    def from_json(cls, json: dict) -> 'CertificateError':
        return cls(
            event_id=int(json['eventId']),
            error_type=str(json['errorType']),
            request_url=str(json['requestURL']),
        )


@dataclass
class SecurityStateChanged:
    '''
    The security state of the page changed.
    '''
    #: The security state of the page changed.
    security_state: SecurityState

    #: The security state of the page changed.
    scheme_is_cryptographic: bool

    #: The security state of the page changed.
    explanations: typing.List['SecurityStateExplanation']

    #: The security state of the page changed.
    insecure_content_status: InsecureContentStatus

    #: The security state of the page changed.
    summary: str

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'Security'
    _method = 'securityStateChanged'

    @classmethod
    def from_json(cls, json: dict) -> 'SecurityStateChanged':
        return cls(
            security_state=SecurityState.from_json(json['securityState']),
            scheme_is_cryptographic=bool(json['schemeIsCryptographic']),
            explanations=[SecurityStateExplanation.from_json(i) for i in json['explanations']],
            insecure_content_status=InsecureContentStatus.from_json(json['insecureContentStatus']),
            summary=str(json['summary']),
        )

