'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: target
Experimental: False
'''

from dataclasses import dataclass, field
import typing


class TargetID(str):
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'TargetID({})'.format(str.__repr__(self))


class SessionID(str):
    '''
    Unique identifier of attached debugging session.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'SessionID({})'.format(str.__repr__(self))


class BrowserContextID(str):
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'BrowserContextID({})'.format(str.__repr__(self))



@dataclass
class TargetInfo:
    target_id: TargetID

    type_: str

    title: str

    url: str

    #: Whether the target has an attached client.
    attached: bool

    #: Opener target Id
    opener_id: TargetID

    browser_context_id: BrowserContextID

    @classmethod
    def from_response(cls, response):
        return cls(
            target_id=TargetID.from_response(response.get('targetId')),
            type_=str(response.get('type')),
            title=str(response.get('title')),
            url=str(response.get('url')),
            attached=bool(response.get('attached')),
            opener_id=TargetID.from_response(response.get('openerId')),
            browser_context_id=BrowserContextID.from_response(response.get('browserContextId')),
        )


@dataclass
class RemoteLocation:
    host: str

    port: int

    @classmethod
    def from_response(cls, response):
        return cls(
            host=str(response.get('host')),
            port=int(response.get('port')),
        )

