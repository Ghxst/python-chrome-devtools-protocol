'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: overlay
Experimental: True
'''

from dataclasses import dataclass, field
import typing

from .types import *
from ..dom import types as dom
from ..page import types as page
from ..runtime import types as runtime



def disable() -> typing.Generator[dict,dict,None]:
    '''
    Disables domain notifications.
    '''

    cmd_dict = {
        'method': 'Overlay.disable',
    }
    response = yield cmd_dict


def enable() -> typing.Generator[dict,dict,None]:
    '''
    Enables domain notifications.
    '''

    cmd_dict = {
        'method': 'Overlay.enable',
    }
    response = yield cmd_dict


def get_highlight_object_for_test(node_id: dom.NodeId, include_distance: bool) -> typing.Generator[dict,dict,dict]:
    '''
    For testing.
    
    :param node_id: Id of the node to get highlight object for.
    :param include_distance: Whether to include distance info.
    :returns: Highlight data for the node.
    '''

    cmd_dict = {
        'method': 'Overlay.getHighlightObjectForTest',
        'params': {
            'nodeId': node_id,
            'includeDistance': include_distance,
        }
    }
    response = yield cmd_dict
    return dict(response['highlight'])


def hide_highlight() -> typing.Generator[dict,dict,None]:
    '''
    Hides any highlight.
    '''

    cmd_dict = {
        'method': 'Overlay.hideHighlight',
    }
    response = yield cmd_dict


def highlight_frame(frame_id: page.FrameId, content_color: dom.RGBA, content_outline_color: dom.RGBA) -> typing.Generator[dict,dict,None]:
    '''
    Highlights owner element of the frame with given id.
    
    :param frame_id: Identifier of the frame to highlight.
    :param content_color: The content box highlight fill color (default: transparent).
    :param content_outline_color: The content box highlight outline color (default: transparent).
    '''

    cmd_dict = {
        'method': 'Overlay.highlightFrame',
        'params': {
            'frameId': frame_id,
            'contentColor': content_color,
            'contentOutlineColor': content_outline_color,
        }
    }
    response = yield cmd_dict


def highlight_node(highlight_config: HighlightConfig, node_id: dom.NodeId, backend_node_id: dom.BackendNodeId, object_id: runtime.RemoteObjectId, selector: str) -> typing.Generator[dict,dict,None]:
    '''
    Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or
    objectId must be specified.
    
    :param highlight_config: A descriptor for the highlight appearance.
    :param node_id: Identifier of the node to highlight.
    :param backend_node_id: Identifier of the backend node to highlight.
    :param object_id: JavaScript object id of the node to be highlighted.
    :param selector: Selectors to highlight relevant nodes.
    '''

    cmd_dict = {
        'method': 'Overlay.highlightNode',
        'params': {
            'highlightConfig': highlight_config,
            'nodeId': node_id,
            'backendNodeId': backend_node_id,
            'objectId': object_id,
            'selector': selector,
        }
    }
    response = yield cmd_dict


def highlight_quad(quad: dom.Quad, color: dom.RGBA, outline_color: dom.RGBA) -> typing.Generator[dict,dict,None]:
    '''
    Highlights given quad. Coordinates are absolute with respect to the main frame viewport.
    
    :param quad: Quad to highlight
    :param color: The highlight fill color (default: transparent).
    :param outline_color: The highlight outline color (default: transparent).
    '''

    cmd_dict = {
        'method': 'Overlay.highlightQuad',
        'params': {
            'quad': quad,
            'color': color,
            'outlineColor': outline_color,
        }
    }
    response = yield cmd_dict


def highlight_rect(x: int, y: int, width: int, height: int, color: dom.RGBA, outline_color: dom.RGBA) -> typing.Generator[dict,dict,None]:
    '''
    Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.
    
    :param x: X coordinate
    :param y: Y coordinate
    :param width: Rectangle width
    :param height: Rectangle height
    :param color: The highlight fill color (default: transparent).
    :param outline_color: The highlight outline color (default: transparent).
    '''

    cmd_dict = {
        'method': 'Overlay.highlightRect',
        'params': {
            'x': x,
            'y': y,
            'width': width,
            'height': height,
            'color': color,
            'outlineColor': outline_color,
        }
    }
    response = yield cmd_dict


def set_inspect_mode(mode: InspectMode, highlight_config: HighlightConfig) -> typing.Generator[dict,dict,None]:
    '''
    Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted.
    Backend then generates 'inspectNodeRequested' event upon element selection.
    
    :param mode: Set an inspection mode.
    :param highlight_config: A descriptor for the highlight appearance of hovered-over nodes. May be omitted if `enabled
    == false`.
    '''

    cmd_dict = {
        'method': 'Overlay.setInspectMode',
        'params': {
            'mode': mode,
            'highlightConfig': highlight_config,
        }
    }
    response = yield cmd_dict


def set_show_ad_highlights(show: bool) -> typing.Generator[dict,dict,None]:
    '''
    Highlights owner element of all frames detected to be ads.
    
    :param show: True for showing ad highlights
    '''

    cmd_dict = {
        'method': 'Overlay.setShowAdHighlights',
        'params': {
            'show': show,
        }
    }
    response = yield cmd_dict


def set_paused_in_debugger_message(message: str) -> typing.Generator[dict,dict,None]:
    '''
    
    
    :param message: The message to display, also triggers resume and step over controls.
    '''

    cmd_dict = {
        'method': 'Overlay.setPausedInDebuggerMessage',
        'params': {
            'message': message,
        }
    }
    response = yield cmd_dict


def set_show_debug_borders(show: bool) -> typing.Generator[dict,dict,None]:
    '''
    Requests that backend shows debug borders on layers
    
    :param show: True for showing debug borders
    '''

    cmd_dict = {
        'method': 'Overlay.setShowDebugBorders',
        'params': {
            'show': show,
        }
    }
    response = yield cmd_dict


def set_show_fps_counter(show: bool) -> typing.Generator[dict,dict,None]:
    '''
    Requests that backend shows the FPS counter
    
    :param show: True for showing the FPS counter
    '''

    cmd_dict = {
        'method': 'Overlay.setShowFPSCounter',
        'params': {
            'show': show,
        }
    }
    response = yield cmd_dict


def set_show_paint_rects(result: bool) -> typing.Generator[dict,dict,None]:
    '''
    Requests that backend shows paint rectangles
    
    :param result: True for showing paint rectangles
    '''

    cmd_dict = {
        'method': 'Overlay.setShowPaintRects',
        'params': {
            'result': result,
        }
    }
    response = yield cmd_dict


def set_show_scroll_bottleneck_rects(show: bool) -> typing.Generator[dict,dict,None]:
    '''
    Requests that backend shows scroll bottleneck rects
    
    :param show: True for showing scroll bottleneck rects
    '''

    cmd_dict = {
        'method': 'Overlay.setShowScrollBottleneckRects',
        'params': {
            'show': show,
        }
    }
    response = yield cmd_dict


def set_show_hit_test_borders(show: bool) -> typing.Generator[dict,dict,None]:
    '''
    Requests that backend shows hit-test borders on layers
    
    :param show: True for showing hit-test borders
    '''

    cmd_dict = {
        'method': 'Overlay.setShowHitTestBorders',
        'params': {
            'show': show,
        }
    }
    response = yield cmd_dict


def set_show_viewport_size_on_resize(show: bool) -> typing.Generator[dict,dict,None]:
    '''
    Paints viewport size upon main frame resize.
    
    :param show: Whether to paint size or not.
    '''

    cmd_dict = {
        'method': 'Overlay.setShowViewportSizeOnResize',
        'params': {
            'show': show,
        }
    }
    response = yield cmd_dict


