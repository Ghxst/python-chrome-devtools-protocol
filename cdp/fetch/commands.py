'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: fetch
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *
from ..io import types as io
from ..network import types as network



def disable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Disables the fetch domain.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Fetch.disable',
    }
    json = yield cmd_dict


def enable(
        patterns: typing.Optional[typing.List['RequestPattern']] = None,
        handle_auth_requests: typing.Optional[bool] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Enables issuing of requestPaused events. A request will be paused until client
    calls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.
    
    :param patterns: If specified, only requests matching any of these patterns will produce
    fetchRequested event and will be paused until clients response. If not set,
    all requests will be affected.
    :param handle_auth_requests: If true, authRequired events will be issued and requests will be paused
    expecting a call to continueWithAuth.
    '''
    params: T_JSON_DICT = {
    }
    if patterns is not None:
        params['patterns'] = [i.to_json() for i in patterns]
    if handle_auth_requests is not None:
        params['handleAuthRequests'] = handle_auth_requests
    cmd_dict: T_JSON_DICT = {
        'method': 'Fetch.enable',
        'params': params,
    }
    json = yield cmd_dict


def fail_request(
        request_id: RequestId,
        error_reason: network.ErrorReason,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Causes the request to fail with specified reason.
    
    :param request_id: An id the client received in requestPaused event.
    :param error_reason: Causes the request to fail with the given reason.
    '''
    params: T_JSON_DICT = {
        'requestId': request_id.to_json(),
        'errorReason': error_reason.to_json(),
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'Fetch.failRequest',
        'params': params,
    }
    json = yield cmd_dict


def fulfill_request(
        request_id: RequestId,
        response_code: int,
        response_headers: typing.List['HeaderEntry'],
        body: typing.Optional[str] = None,
        response_phrase: typing.Optional[str] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Provides response to the request.
    
    :param request_id: An id the client received in requestPaused event.
    :param response_code: An HTTP response code.
    :param response_headers: Response headers.
    :param body: A response body.
    :param response_phrase: A textual representation of responseCode.
    If absent, a standard phrase mathcing responseCode is used.
    '''
    params: T_JSON_DICT = {
        'requestId': request_id.to_json(),
        'responseCode': response_code,
        'responseHeaders': [i.to_json() for i in response_headers],
    }
    if body is not None:
        params['body'] = body
    if response_phrase is not None:
        params['responsePhrase'] = response_phrase
    cmd_dict: T_JSON_DICT = {
        'method': 'Fetch.fulfillRequest',
        'params': params,
    }
    json = yield cmd_dict


def continue_request(
        request_id: RequestId,
        url: typing.Optional[str] = None,
        method: typing.Optional[str] = None,
        post_data: typing.Optional[str] = None,
        headers: typing.Optional[typing.List['HeaderEntry']] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Continues the request, optionally modifying some of its parameters.
    
    :param request_id: An id the client received in requestPaused event.
    :param url: If set, the request url will be modified in a way that's not observable by page.
    :param method: If set, the request method is overridden.
    :param post_data: If set, overrides the post data in the request.
    :param headers: If set, overrides the request headrts.
    '''
    params: T_JSON_DICT = {
        'requestId': request_id.to_json(),
    }
    if url is not None:
        params['url'] = url
    if method is not None:
        params['method'] = method
    if post_data is not None:
        params['postData'] = post_data
    if headers is not None:
        params['headers'] = [i.to_json() for i in headers]
    cmd_dict: T_JSON_DICT = {
        'method': 'Fetch.continueRequest',
        'params': params,
    }
    json = yield cmd_dict


def continue_with_auth(
        request_id: RequestId,
        auth_challenge_response: AuthChallengeResponse,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Continues a request supplying authChallengeResponse following authRequired event.
    
    :param request_id: An id the client received in authRequired event.
    :param auth_challenge_response: Response to  with an authChallenge.
    '''
    params: T_JSON_DICT = {
        'requestId': request_id.to_json(),
        'authChallengeResponse': auth_challenge_response.to_json(),
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'Fetch.continueWithAuth',
        'params': params,
    }
    json = yield cmd_dict


def get_response_body(
        request_id: RequestId,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,dict]:
    '''
    Causes the body of the response to be received from the server and
    returned as a single string. May only be issued for a request that
    is paused in the Response stage and is mutually exclusive with
    takeResponseBodyForInterceptionAsStream. Calling other methods that
    affect the request or disabling fetch domain before body is received
    results in an undefined behavior.
    
    :param request_id: Identifier for the intercepted request to get body for.
    :returns: a dict with the following keys:
        * body: Response body.
        * base64Encoded: True, if content was sent as base64.
    '''
    params: T_JSON_DICT = {
        'requestId': request_id.to_json(),
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'Fetch.getResponseBody',
        'params': params,
    }
    json = yield cmd_dict
    result: T_JSON_DICT = {
        'body': str(json['body']),
        'base64Encoded': bool(json['base64Encoded']),
    }
    return result


def take_response_body_as_stream(
        request_id: RequestId,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,io.StreamHandle]:
    '''
    Returns a handle to the stream representing the response body.
    The request must be paused in the HeadersReceived stage.
    Note that after this command the request can't be continued
    as is -- client either needs to cancel it or to provide the
    response body.
    The stream only supports sequential read, IO.read will fail if the position
    is specified.
    This method is mutually exclusive with getResponseBody.
    Calling other methods that affect the request or disabling fetch
    domain before body is received results in an undefined behavior.
    
    :param request_id: 
    :returns: 
    '''
    params: T_JSON_DICT = {
        'requestId': request_id.to_json(),
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'Fetch.takeResponseBodyAsStream',
        'params': params,
    }
    json = yield cmd_dict
    return io.StreamHandle.from_json(json['stream'])


