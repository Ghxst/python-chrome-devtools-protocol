'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: background_service
Experimental: True
'''

from dataclasses import dataclass, field
import typing

from ..network import types as network
from ..service_worker import types as service_worker



class ServiceName:
    '''
    The Background Service that will be associated with the commands/events.
    Every Background Service operates independently, but they share the same
    API.
    '''
    BACKGROUND_FETCH = "backgroundFetch"
    BACKGROUND_SYNC = "backgroundSync"
    PUSH_MESSAGING = "pushMessaging"
    NOTIFICATIONS = "notifications"


@dataclass
class EventMetadata:
    '''
    A key-value pair for additional event information to pass along.
    '''
    key: str

    value: str

    @classmethod
    def from_response(cls, response):
        return cls(
            key=str(response.get('key')),
            value=str(response.get('value')),
        )


@dataclass
class BackgroundServiceEvent:
    #: Timestamp of the event (in seconds).
    timestamp: network.TimeSinceEpoch

    #: The origin this event belongs to.
    origin: str

    #: The Service Worker ID that initiated the event.
    service_worker_registration_id: service_worker.RegistrationID

    #: The Background Service this event belongs to.
    service: ServiceName

    #: A description of the event.
    event_name: str

    #: An identifier that groups related events together.
    instance_id: str

    #: A list of event-specific information.
    event_metadata: typing.List['EventMetadata']

    @classmethod
    def from_response(cls, response):
        return cls(
            timestamp=network.TimeSinceEpoch.from_response(response.get('timestamp')),
            origin=str(response.get('origin')),
            service_worker_registration_id=service_worker.RegistrationID.from_response(response.get('serviceWorkerRegistrationId')),
            service=ServiceName.from_response(response.get('service')),
            event_name=str(response.get('eventName')),
            instance_id=str(response.get('instanceId')),
            event_metadata=[EventMetadata.from_response(i) for i in response.get('eventMetadata')],
        )

