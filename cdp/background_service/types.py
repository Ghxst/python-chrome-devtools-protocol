'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: background_service
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from ..network import types as network
from ..service_worker import types as service_worker


class ServiceName(enum.Enum):
    '''
    The Background Service that will be associated with the commands/events.
    Every Background Service operates independently, but they share the same
    API.
    '''
    BACKGROUND_FETCH = "backgroundFetch"
    BACKGROUND_SYNC = "backgroundSync"
    PUSH_MESSAGING = "pushMessaging"
    NOTIFICATIONS = "notifications"

    def to_json(self) -> str:
        return self.value

    @classmethod
    def from_json(cls, json: str) -> 'ServiceName':
        return cls(json)


@dataclass
class EventMetadata:
    '''
    A key-value pair for additional event information to pass along.
    '''
    key: str

    value: str

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'key': self.key,
            'value': self.value,
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'EventMetadata':
        return cls(
            key=json['key'],
            value=json['value'],
        )

@dataclass
class BackgroundServiceEvent:
    #: Timestamp of the event (in seconds).
    timestamp: network.TimeSinceEpoch

    #: The origin this event belongs to.
    origin: str

    #: The Service Worker ID that initiated the event.
    service_worker_registration_id: service_worker.RegistrationID

    #: The Background Service this event belongs to.
    service: ServiceName

    #: A description of the event.
    event_name: str

    #: An identifier that groups related events together.
    instance_id: str

    #: A list of event-specific information.
    event_metadata: typing.List['EventMetadata']

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'timestamp': self.timestamp.to_json(),
            'origin': self.origin,
            'serviceWorkerRegistrationId': self.service_worker_registration_id.to_json(),
            'service': self.service.to_json(),
            'eventName': self.event_name,
            'instanceId': self.instance_id,
            'eventMetadata': [i.to_json() for i in self.event_metadata],
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'BackgroundServiceEvent':
        return cls(
            timestamp=network.TimeSinceEpoch.from_json(json['timestamp']),
            origin=json['origin'],
            service_worker_registration_id=service_worker.RegistrationID.from_json(json['serviceWorkerRegistrationId']),
            service=ServiceName.from_json(json['service']),
            event_name=json['eventName'],
            instance_id=json['instanceId'],
            event_metadata=[EventMetadata.from_json(i) for i in json['eventMetadata']],
        )

