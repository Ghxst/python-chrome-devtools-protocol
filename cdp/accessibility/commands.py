'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: accessibility
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *
from ..dom import types as dom
from ..runtime import types as runtime



def disable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Disables the accessibility domain.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Accessibility.disable',
    }
    json = yield cmd_dict


def enable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Enables the accessibility domain which causes `AXNodeId`s to remain consistent between method calls.
    This turns on accessibility for the page, which can impact performance until accessibility is disabled.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Accessibility.enable',
    }
    json = yield cmd_dict


def get_partial_ax_tree(
        node_id: typing.Optional[dom.NodeId] = None,
        backend_node_id: typing.Optional[dom.BackendNodeId] = None,
        object_id: typing.Optional[runtime.RemoteObjectId] = None,
        fetch_relatives: typing.Optional[bool] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,typing.List['AXNode']]:
    '''
    Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.
    
    :param node_id: Identifier of the node to get the partial accessibility tree for.
    :param backend_node_id: Identifier of the backend node to get the partial accessibility tree for.
    :param object_id: JavaScript object id of the node wrapper to get the partial accessibility tree for.
    :param fetch_relatives: Whether to fetch this nodes ancestors, siblings and children. Defaults to true.
    :returns: The `Accessibility.AXNode` for this DOM node, if it exists, plus its ancestors, siblings and
    children, if requested.
    '''
    params: T_JSON_DICT = {
    }
    if node_id is not None:
        params['nodeId'] = node_id.to_json()
    if backend_node_id is not None:
        params['backendNodeId'] = backend_node_id.to_json()
    if object_id is not None:
        params['objectId'] = object_id.to_json()
    if fetch_relatives is not None:
        params['fetchRelatives'] = fetch_relatives
    cmd_dict: T_JSON_DICT = {
        'method': 'Accessibility.getPartialAXTree',
        'params': params,
    }
    json = yield cmd_dict
    return [AXNode.from_json(i) for i in json['nodes']]


def get_full_ax_tree() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,typing.List['AXNode']]:
    '''
    Fetches the entire accessibility tree
    :returns: 
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'Accessibility.getFullAXTree',
    }
    json = yield cmd_dict
    return [AXNode.from_json(i) for i in json['nodes']]


