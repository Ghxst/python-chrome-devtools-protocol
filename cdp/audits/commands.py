'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: audits
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *
from ..network import types as network



def get_encoded_response(
        request_id: network.RequestId,
        encoding: str,
        quality: typing.Optional[float] = None,
        size_only: typing.Optional[bool] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,dict]:
    '''
    Returns the response body and size if it were re-encoded with the specified settings. Only
    applies to images.
    
    :param request_id: Identifier of the network request to get content for.
    :param encoding: The encoding to use.
    :param quality: The quality of the encoding (0-1). (defaults to 1)
    :param size_only: Whether to only return the size information (defaults to false).
    :returns: a dict with the following keys:
        * body: (Optional) The encoded body as a base64 string. Omitted if sizeOnly is true.
        * originalSize: Size before re-encoding.
        * encodedSize: Size after re-encoding.
    '''
    params: T_JSON_DICT = {
        'requestId': request_id.to_json(),
        'encoding': encoding,
    }
    if quality is not None:
        params['quality'] = quality
    if size_only is not None:
        params['sizeOnly'] = size_only
    cmd_dict: T_JSON_DICT = {
        'method': 'Audits.getEncodedResponse',
        'params': params,
    }
    json = yield cmd_dict
    result: T_JSON_DICT = {
        'originalSize': int(json['originalSize']),
        'encodedSize': int(json['encodedSize']),
    }
    if 'body' in json:
        result['body'] = str(json['body'])
    return result


