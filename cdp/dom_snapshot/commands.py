'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: dom_snapshot
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *


def disable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Disables DOM snapshot agent for the given page.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'DOMSnapshot.disable',
    }
    json = yield cmd_dict


def enable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    Enables DOM snapshot agent for the given page.
    '''
    cmd_dict: T_JSON_DICT = {
        'method': 'DOMSnapshot.enable',
    }
    json = yield cmd_dict


def get_snapshot(
        computed_style_whitelist: typing.List['str'],
        include_event_listeners: typing.Optional[bool] = None,
        include_paint_order: typing.Optional[bool] = None,
        include_user_agent_shadow_tree: typing.Optional[bool] = None,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,dict]:
    '''
    Returns a document snapshot, including the full DOM tree of the root node (including iframes,
    template contents, and imported documents) in a flattened array, as well as layout and
    white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is
    flattened.
    
    :param computed_style_whitelist: Whitelist of computed styles to return.
    :param include_event_listeners: Whether or not to retrieve details of DOM listeners (default false).
    :param include_paint_order: Whether to determine and include the paint order index of LayoutTreeNodes (default false).
    :param include_user_agent_shadow_tree: Whether to include UA shadow tree in the snapshot (default false).
    :returns: a dict with the following keys:
        * domNodes: The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.
        * layoutTreeNodes: The nodes in the layout tree.
        * computedStyles: Whitelisted ComputedStyle properties for each node in the layout tree.
    '''
    params: T_JSON_DICT = {
        'computedStyleWhitelist': [i for i in computed_style_whitelist],
    }
    if include_event_listeners is not None:
        params['includeEventListeners'] = include_event_listeners
    if include_paint_order is not None:
        params['includePaintOrder'] = include_paint_order
    if include_user_agent_shadow_tree is not None:
        params['includeUserAgentShadowTree'] = include_user_agent_shadow_tree
    cmd_dict: T_JSON_DICT = {
        'method': 'DOMSnapshot.getSnapshot',
        'params': params,
    }
    json = yield cmd_dict
    result: T_JSON_DICT = {
        'domNodes': [DOMNode.from_json(i) for i in json['domNodes']],
        'layoutTreeNodes': [LayoutTreeNode.from_json(i) for i in json['layoutTreeNodes']],
        'computedStyles': [ComputedStyle.from_json(i) for i in json['computedStyles']],
    }
    return result


def capture_snapshot(
        computed_styles: typing.List['str'],
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,dict]:
    '''
    Returns a document snapshot, including the full DOM tree of the root node (including iframes,
    template contents, and imported documents) in a flattened array, as well as layout and
    white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is
    flattened.
    
    :param computed_styles: Whitelist of computed styles to return.
    :returns: a dict with the following keys:
        * documents: The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.
        * strings: Shared string table that all string properties refer to with indexes.
    '''
    params: T_JSON_DICT = {
        'computedStyles': [i for i in computed_styles],
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'DOMSnapshot.captureSnapshot',
        'params': params,
    }
    json = yield cmd_dict
    result: T_JSON_DICT = {
        'documents': [DocumentSnapshot.from_json(i) for i in json['documents']],
        'strings': [str(i) for i in json['strings']],
    }
    return result


