'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: network
Experimental: False
'''

from dataclasses import dataclass, field
import typing

from .types import *
from ..page import types as page



@dataclass
class DataReceived:
    '''
    Fired when data chunk was received over the network.
    '''
    #: Fired when data chunk was received over the network.
    request_id: RequestId

    #: Fired when data chunk was received over the network.
    timestamp: MonotonicTime

    #: Fired when data chunk was received over the network.
    data_length: int

    #: Fired when data chunk was received over the network.
    encoded_data_length: int


@dataclass
class EventSourceMessageReceived:
    '''
    Fired when EventSource message is received.
    '''
    #: Fired when EventSource message is received.
    request_id: RequestId

    #: Fired when EventSource message is received.
    timestamp: MonotonicTime

    #: Fired when EventSource message is received.
    event_name: str

    #: Fired when EventSource message is received.
    event_id: str

    #: Fired when EventSource message is received.
    data: str


@dataclass
class LoadingFailed:
    '''
    Fired when HTTP request has failed to load.
    '''
    #: Fired when HTTP request has failed to load.
    request_id: RequestId

    #: Fired when HTTP request has failed to load.
    timestamp: MonotonicTime

    #: Fired when HTTP request has failed to load.
    type: ResourceType

    #: Fired when HTTP request has failed to load.
    error_text: str

    #: Fired when HTTP request has failed to load.
    canceled: bool

    #: Fired when HTTP request has failed to load.
    blocked_reason: BlockedReason


@dataclass
class LoadingFinished:
    '''
    Fired when HTTP request has finished loading.
    '''
    #: Fired when HTTP request has finished loading.
    request_id: RequestId

    #: Fired when HTTP request has finished loading.
    timestamp: MonotonicTime

    #: Fired when HTTP request has finished loading.
    encoded_data_length: float

    #: Fired when HTTP request has finished loading.
    should_report_corb_blocking: bool


@dataclass
class RequestIntercepted:
    '''
    Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    mocked.
    '''
    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    interception_id: InterceptionId

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    request: Request

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    frame_id: page.FrameId

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    resource_type: ResourceType

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    is_navigation_request: bool

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    is_download: bool

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    redirect_url: str

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    auth_challenge: AuthChallenge

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    response_error_reason: ErrorReason

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    response_status_code: int

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    response_headers: Headers

    #: Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    #: mocked.
    request_id: RequestId


@dataclass
class RequestServedFromCache:
    '''
    Fired if request ended up loading from cache.
    '''
    #: Fired if request ended up loading from cache.
    request_id: RequestId


@dataclass
class RequestWillBeSent:
    '''
    Fired when page is about to send HTTP request.
    '''
    #: Fired when page is about to send HTTP request.
    request_id: RequestId

    #: Fired when page is about to send HTTP request.
    loader_id: LoaderId

    #: Fired when page is about to send HTTP request.
    document_url: str

    #: Fired when page is about to send HTTP request.
    request: Request

    #: Fired when page is about to send HTTP request.
    timestamp: MonotonicTime

    #: Fired when page is about to send HTTP request.
    wall_time: TimeSinceEpoch

    #: Fired when page is about to send HTTP request.
    initiator: Initiator

    #: Fired when page is about to send HTTP request.
    redirect_response: Response

    #: Fired when page is about to send HTTP request.
    type: ResourceType

    #: Fired when page is about to send HTTP request.
    frame_id: page.FrameId

    #: Fired when page is about to send HTTP request.
    has_user_gesture: bool


@dataclass
class ResourceChangedPriority:
    '''
    Fired when resource loading priority is changed
    '''
    #: Fired when resource loading priority is changed
    request_id: RequestId

    #: Fired when resource loading priority is changed
    new_priority: ResourcePriority

    #: Fired when resource loading priority is changed
    timestamp: MonotonicTime


@dataclass
class SignedExchangeReceived:
    '''
    Fired when a signed exchange was received over the network
    '''
    #: Fired when a signed exchange was received over the network
    request_id: RequestId

    #: Fired when a signed exchange was received over the network
    info: SignedExchangeInfo


@dataclass
class ResponseReceived:
    '''
    Fired when HTTP response is available.
    '''
    #: Fired when HTTP response is available.
    request_id: RequestId

    #: Fired when HTTP response is available.
    loader_id: LoaderId

    #: Fired when HTTP response is available.
    timestamp: MonotonicTime

    #: Fired when HTTP response is available.
    type: ResourceType

    #: Fired when HTTP response is available.
    response: Response

    #: Fired when HTTP response is available.
    frame_id: page.FrameId


@dataclass
class WebSocketClosed:
    '''
    Fired when WebSocket is closed.
    '''
    #: Fired when WebSocket is closed.
    request_id: RequestId

    #: Fired when WebSocket is closed.
    timestamp: MonotonicTime


@dataclass
class WebSocketCreated:
    '''
    Fired upon WebSocket creation.
    '''
    #: Fired upon WebSocket creation.
    request_id: RequestId

    #: Fired upon WebSocket creation.
    url: str

    #: Fired upon WebSocket creation.
    initiator: Initiator


@dataclass
class WebSocketFrameError:
    '''
    Fired when WebSocket message error occurs.
    '''
    #: Fired when WebSocket message error occurs.
    request_id: RequestId

    #: Fired when WebSocket message error occurs.
    timestamp: MonotonicTime

    #: Fired when WebSocket message error occurs.
    error_message: str


@dataclass
class WebSocketFrameReceived:
    '''
    Fired when WebSocket message is received.
    '''
    #: Fired when WebSocket message is received.
    request_id: RequestId

    #: Fired when WebSocket message is received.
    timestamp: MonotonicTime

    #: Fired when WebSocket message is received.
    response: WebSocketFrame


@dataclass
class WebSocketFrameSent:
    '''
    Fired when WebSocket message is sent.
    '''
    #: Fired when WebSocket message is sent.
    request_id: RequestId

    #: Fired when WebSocket message is sent.
    timestamp: MonotonicTime

    #: Fired when WebSocket message is sent.
    response: WebSocketFrame


@dataclass
class WebSocketHandshakeResponseReceived:
    '''
    Fired when WebSocket handshake response becomes available.
    '''
    #: Fired when WebSocket handshake response becomes available.
    request_id: RequestId

    #: Fired when WebSocket handshake response becomes available.
    timestamp: MonotonicTime

    #: Fired when WebSocket handshake response becomes available.
    response: WebSocketResponse


@dataclass
class WebSocketWillSendHandshakeRequest:
    '''
    Fired when WebSocket is about to initiate handshake.
    '''
    #: Fired when WebSocket is about to initiate handshake.
    request_id: RequestId

    #: Fired when WebSocket is about to initiate handshake.
    timestamp: MonotonicTime

    #: Fired when WebSocket is about to initiate handshake.
    wall_time: TimeSinceEpoch

    #: Fired when WebSocket is about to initiate handshake.
    request: WebSocketRequest

