'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: service_worker
Experimental: True
'''

from dataclasses import dataclass, field
import typing

from ..target import types as target


class RegistrationID(str):
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'RegistrationID({})'.format(str.__repr__(self))



class ServiceWorkerVersionRunningStatus:
    STOPPED = "stopped"
    STARTING = "starting"
    RUNNING = "running"
    STOPPING = "stopping"


class ServiceWorkerVersionStatus:
    NEW = "new"
    INSTALLING = "installing"
    INSTALLED = "installed"
    ACTIVATING = "activating"
    ACTIVATED = "activated"
    REDUNDANT = "redundant"


@dataclass
class ServiceWorkerRegistration:
    '''
    ServiceWorker registration.
    '''
    registration_id: RegistrationID

    scope_url: str

    is_deleted: bool

    @classmethod
    def from_response(cls, response):
        return cls(
            registration_id=RegistrationID.from_response(response.get('registrationId')),
            scope_url=str(response.get('scopeURL')),
            is_deleted=bool(response.get('isDeleted')),
        )


@dataclass
class ServiceWorkerVersion:
    '''
    ServiceWorker version.
    '''
    version_id: str

    registration_id: RegistrationID

    script_url: str

    running_status: ServiceWorkerVersionRunningStatus

    status: ServiceWorkerVersionStatus

    #: The Last-Modified header value of the main script.
    script_last_modified: float

    #: The time at which the response headers of the main script were received from the server.
    #: For cached script it is the last time the cache entry was validated.
    script_response_time: float

    controlled_clients: typing.List['target.TargetID']

    target_id: target.TargetID

    @classmethod
    def from_response(cls, response):
        return cls(
            version_id=str(response.get('versionId')),
            registration_id=RegistrationID.from_response(response.get('registrationId')),
            script_url=str(response.get('scriptURL')),
            running_status=ServiceWorkerVersionRunningStatus.from_response(response.get('runningStatus')),
            status=ServiceWorkerVersionStatus.from_response(response.get('status')),
            script_last_modified=float(response.get('scriptLastModified')),
            script_response_time=float(response.get('scriptResponseTime')),
            controlled_clients=[target.TargetID.from_response(i) for i in response.get('controlledClients')],
            target_id=target.TargetID.from_response(response.get('targetId')),
        )


@dataclass
class ServiceWorkerErrorMessage:
    '''
    ServiceWorker error message.
    '''
    error_message: str

    registration_id: RegistrationID

    version_id: str

    source_url: str

    line_number: int

    column_number: int

    @classmethod
    def from_response(cls, response):
        return cls(
            error_message=str(response.get('errorMessage')),
            registration_id=RegistrationID.from_response(response.get('registrationId')),
            version_id=str(response.get('versionId')),
            source_url=str(response.get('sourceURL')),
            line_number=int(response.get('lineNumber')),
            column_number=int(response.get('columnNumber')),
        )

