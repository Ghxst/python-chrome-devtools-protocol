'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: service_worker
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *


def deliver_push_message(
        origin: str,
        registration_id: RegistrationID,
        data: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param origin: 
    :param registration_id: 
    :param data: 
    '''
    params: T_JSON_DICT = {
        'origin': origin,
        'registrationId': registration_id.to_json(),
        'data': data,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.deliverPushMessage',
        'params': params,
    }
    json = yield cmd_dict


def disable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.disable',
    }
    json = yield cmd_dict


def dispatch_sync_event(
        origin: str,
        registration_id: RegistrationID,
        tag: str,
        last_chance: bool,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param origin: 
    :param registration_id: 
    :param tag: 
    :param last_chance: 
    '''
    params: T_JSON_DICT = {
        'origin': origin,
        'registrationId': registration_id.to_json(),
        'tag': tag,
        'lastChance': last_chance,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.dispatchSyncEvent',
        'params': params,
    }
    json = yield cmd_dict


def enable() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.enable',
    }
    json = yield cmd_dict


def inspect_worker(
        version_id: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param version_id: 
    '''
    params: T_JSON_DICT = {
        'versionId': version_id,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.inspectWorker',
        'params': params,
    }
    json = yield cmd_dict


def set_force_update_on_page_load(
        force_update_on_page_load: bool,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param force_update_on_page_load: 
    '''
    params: T_JSON_DICT = {
        'forceUpdateOnPageLoad': force_update_on_page_load,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.setForceUpdateOnPageLoad',
        'params': params,
    }
    json = yield cmd_dict


def skip_waiting(
        scope_url: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param scope_url: 
    '''
    params: T_JSON_DICT = {
        'scopeURL': scope_url,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.skipWaiting',
        'params': params,
    }
    json = yield cmd_dict


def start_worker(
        scope_url: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param scope_url: 
    '''
    params: T_JSON_DICT = {
        'scopeURL': scope_url,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.startWorker',
        'params': params,
    }
    json = yield cmd_dict


def stop_all_workers() -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.stopAllWorkers',
    }
    json = yield cmd_dict


def stop_worker(
        version_id: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param version_id: 
    '''
    params: T_JSON_DICT = {
        'versionId': version_id,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.stopWorker',
        'params': params,
    }
    json = yield cmd_dict


def unregister(
        scope_url: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param scope_url: 
    '''
    params: T_JSON_DICT = {
        'scopeURL': scope_url,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.unregister',
        'params': params,
    }
    json = yield cmd_dict


def update_registration(
        scope_url: str,
    ) -> typing.Generator[T_JSON_DICT,T_JSON_DICT,None]:
    '''
    
    
    :param scope_url: 
    '''
    params: T_JSON_DICT = {
        'scopeURL': scope_url,
    }
    cmd_dict: T_JSON_DICT = {
        'method': 'ServiceWorker.updateRegistration',
        'params': params,
    }
    json = yield cmd_dict


