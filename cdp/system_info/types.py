'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: system_info
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing


@dataclass
class GPUDevice:
    '''
    Describes a single graphics processor (GPU).
    '''
    #: PCI ID of the GPU vendor, if available; 0 otherwise.
    vendor_id: float

    #: PCI ID of the GPU device, if available; 0 otherwise.
    device_id: float

    #: String description of the GPU vendor, if the PCI ID is not available.
    vendor_string: str

    #: String description of the GPU device, if the PCI ID is not available.
    device_string: str

    #: String description of the GPU driver vendor.
    driver_vendor: str

    #: String description of the GPU driver version.
    driver_version: str

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'vendorId': self.vendor_id,
            'deviceId': self.device_id,
            'vendorString': self.vendor_string,
            'deviceString': self.device_string,
            'driverVendor': self.driver_vendor,
            'driverVersion': self.driver_version,
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'GPUDevice':
        return cls(
            vendor_id=json['vendorId'],
            device_id=json['deviceId'],
            vendor_string=json['vendorString'],
            device_string=json['deviceString'],
            driver_vendor=json['driverVendor'],
            driver_version=json['driverVersion'],
        )

@dataclass
class GPUInfo:
    '''
    Provides information about the GPU(s) on the system.
    '''
    #: The graphics devices on the system. Element 0 is the primary GPU.
    devices: typing.List['GPUDevice']

    #: An optional array of GPU driver bug workarounds.
    driver_bug_workarounds: typing.List['str']

    #: An optional dictionary of additional GPU related attributes.
    aux_attributes: typing.Optional[dict] = None

    #: An optional dictionary of graphics features and their status.
    feature_status: typing.Optional[dict] = None

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'devices': [i.to_json() for i in self.devices],
            'driverBugWorkarounds': [i for i in self.driver_bug_workarounds],
        }
        if self.aux_attributes is not None:
            json['auxAttributes'] = self.aux_attributes
        if self.feature_status is not None:
            json['featureStatus'] = self.feature_status
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'GPUInfo':
        aux_attributes = json['auxAttributes'] if 'auxAttributes' in json else None
        feature_status = json['featureStatus'] if 'featureStatus' in json else None
        return cls(
            devices=[GPUDevice.from_json(i) for i in json['devices']],
            aux_attributes=aux_attributes,
            feature_status=feature_status,
            driver_bug_workarounds=[i for i in json['driverBugWorkarounds']],
        )

@dataclass
class ProcessInfo:
    '''
    Represents process info.
    '''
    #: Specifies process type.
    type: str

    #: Specifies process id.
    id: int

    #: Specifies cumulative CPU usage in seconds across all threads of the
    #: process since the process start.
    cpu_time: float

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'type': self.type,
            'id': self.id,
            'cpuTime': self.cpu_time,
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'ProcessInfo':
        return cls(
            type=json['type'],
            id=json['id'],
            cpu_time=json['cpuTime'],
        )

