'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: system_info
Experimental: True
'''

from dataclasses import dataclass, field
import typing



@dataclass
class GPUDevice:
    '''
    Describes a single graphics processor (GPU).
    '''
    #: PCI ID of the GPU vendor, if available; 0 otherwise.
    vendor_id: float

    #: PCI ID of the GPU device, if available; 0 otherwise.
    device_id: float

    #: String description of the GPU vendor, if the PCI ID is not available.
    vendor_string: str

    #: String description of the GPU device, if the PCI ID is not available.
    device_string: str

    #: String description of the GPU driver vendor.
    driver_vendor: str

    #: String description of the GPU driver version.
    driver_version: str

    @classmethod
    def from_response(cls, response):
        return cls(
            vendor_id=float(response.get('vendorId')),
            device_id=float(response.get('deviceId')),
            vendor_string=str(response.get('vendorString')),
            device_string=str(response.get('deviceString')),
            driver_vendor=str(response.get('driverVendor')),
            driver_version=str(response.get('driverVersion')),
        )


@dataclass
class GPUInfo:
    '''
    Provides information about the GPU(s) on the system.
    '''
    #: The graphics devices on the system. Element 0 is the primary GPU.
    devices: typing.List['GPUDevice']

    #: An optional dictionary of additional GPU related attributes.
    aux_attributes: dict

    #: An optional dictionary of graphics features and their status.
    feature_status: dict

    #: An optional array of GPU driver bug workarounds.
    driver_bug_workarounds: typing.List

    @classmethod
    def from_response(cls, response):
        return cls(
            devices=[GPUDevice.from_response(i) for i in response.get('devices')],
            aux_attributes=dict(response.get('auxAttributes')),
            feature_status=dict(response.get('featureStatus')),
            driver_bug_workarounds=[str(i) for i in response.get('driverBugWorkarounds')],
        )


@dataclass
class ProcessInfo:
    '''
    Represents process info.
    '''
    #: Specifies process type.
    type_: str

    #: Specifies process id.
    id: int

    #: Specifies cumulative CPU usage in seconds across all threads of the
    #: process since the process start.
    cpu_time: float

    @classmethod
    def from_response(cls, response):
        return cls(
            type_=str(response.get('type')),
            id=int(response.get('id')),
            cpu_time=float(response.get('cpuTime')),
        )

