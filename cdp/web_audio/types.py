'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: web_audio
Experimental: True
'''

from dataclasses import dataclass, field
import typing


class ContextId(str):
    '''
    Context's UUID in string
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'ContextId({})'.format(str.__repr__(self))



class ContextType:
    '''
    Enum of BaseAudioContext types
    '''
    REALTIME = "realtime"
    OFFLINE = "offline"


class ContextState:
    '''
    Enum of AudioContextState from the spec
    '''
    SUSPENDED = "suspended"
    RUNNING = "running"
    CLOSED = "closed"


@dataclass
class ContextRealtimeData:
    '''
    Fields in AudioContext that change in real-time. These are not updated
    on OfflineAudioContext.
    '''
    #: The current context time in second in BaseAudioContext.
    current_time: float

    #: The time spent on rendering graph divided by render qunatum duration,
    #: and multiplied by 100. 100 means the audio renderer reached the full
    #: capacity and glitch may occur.
    render_capacity: float

    @classmethod
    def from_response(cls, response):
        return cls(
            current_time=float(response.get('currentTime')),
            render_capacity=float(response.get('renderCapacity')),
        )


@dataclass
class BaseAudioContext:
    '''
    Protocol object for BaseAudioContext
    '''
    context_id: ContextId

    context_type: ContextType

    context_state: ContextState

    realtime_data: ContextRealtimeData

    #: Platform-dependent callback buffer size.
    callback_buffer_size: float

    #: Number of output channels supported by audio hardware in use.
    max_output_channel_count: float

    #: Context sample rate.
    sample_rate: float

    @classmethod
    def from_response(cls, response):
        return cls(
            context_id=ContextId.from_response(response.get('contextId')),
            context_type=ContextType.from_response(response.get('contextType')),
            context_state=ContextState.from_response(response.get('contextState')),
            realtime_data=ContextRealtimeData.from_response(response.get('realtimeData')),
            callback_buffer_size=float(response.get('callbackBufferSize')),
            max_output_channel_count=float(response.get('maxOutputChannelCount')),
            sample_rate=float(response.get('sampleRate')),
        )

