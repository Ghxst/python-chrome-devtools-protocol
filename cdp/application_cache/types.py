'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: application_cache
Experimental: True
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from ..page import types as page


@dataclass
class ApplicationCacheResource:
    '''
    Detailed application cache resource information.
    '''
    #: Resource url.
    url: str

    #: Resource size.
    size: int

    #: Resource type.
    type: str

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'url': self.url,
            'size': self.size,
            'type': self.type,
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'ApplicationCacheResource':
        return cls(
            url=json['url'],
            size=json['size'],
            type=json['type'],
        )

@dataclass
class ApplicationCache:
    '''
    Detailed application cache information.
    '''
    #: Manifest URL.
    manifest_url: str

    #: Application cache size.
    size: float

    #: Application cache creation time.
    creation_time: float

    #: Application cache update time.
    update_time: float

    #: Application cache resources.
    resources: typing.List['ApplicationCacheResource']

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'manifestURL': self.manifest_url,
            'size': self.size,
            'creationTime': self.creation_time,
            'updateTime': self.update_time,
            'resources': [i.to_json() for i in self.resources],
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'ApplicationCache':
        return cls(
            manifest_url=json['manifestURL'],
            size=json['size'],
            creation_time=json['creationTime'],
            update_time=json['updateTime'],
            resources=[ApplicationCacheResource.from_json(i) for i in json['resources']],
        )

@dataclass
class FrameWithManifest:
    '''
    Frame identifier - manifest URL pair.
    '''
    #: Frame identifier.
    frame_id: page.FrameId

    #: Manifest URL.
    manifest_url: str

    #: Application cache status.
    status: int

    def to_json(self) -> T_JSON_DICT:
        json: T_JSON_DICT = {
            'frameId': self.frame_id.to_json(),
            'manifestURL': self.manifest_url,
            'status': self.status,
        }
        return json

    @classmethod
    def from_json(cls, json: T_JSON_DICT) -> 'FrameWithManifest':
        return cls(
            frame_id=page.FrameId.from_json(json['frameId']),
            manifest_url=json['manifestURL'],
            status=json['status'],
        )

