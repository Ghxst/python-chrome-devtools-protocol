'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: dom
Experimental: False
'''

from cdp.util import T_JSON_DICT
from dataclasses import dataclass
import enum
import typing

from .types import *


@dataclass
class AttributeModified:
    '''
    Fired when `Element`'s attribute is modified.
    '''
    #: Fired when `Element`'s attribute is modified.
    node_id: NodeId

    #: Fired when `Element`'s attribute is modified.
    name: str

    #: Fired when `Element`'s attribute is modified.
    value: str

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'attributeModified'

    @classmethod
    def from_json(cls, json: dict) -> 'AttributeModified':
        return cls(
            node_id=NodeId.from_json(json['nodeId']),
            name=str(json['name']),
            value=str(json['value']),
        )


@dataclass
class AttributeRemoved:
    '''
    Fired when `Element`'s attribute is removed.
    '''
    #: Fired when `Element`'s attribute is removed.
    node_id: NodeId

    #: Fired when `Element`'s attribute is removed.
    name: str

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'attributeRemoved'

    @classmethod
    def from_json(cls, json: dict) -> 'AttributeRemoved':
        return cls(
            node_id=NodeId.from_json(json['nodeId']),
            name=str(json['name']),
        )


@dataclass
class CharacterDataModified:
    '''
    Mirrors `DOMCharacterDataModified` event.
    '''
    #: Mirrors `DOMCharacterDataModified` event.
    node_id: NodeId

    #: Mirrors `DOMCharacterDataModified` event.
    character_data: str

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'characterDataModified'

    @classmethod
    def from_json(cls, json: dict) -> 'CharacterDataModified':
        return cls(
            node_id=NodeId.from_json(json['nodeId']),
            character_data=str(json['characterData']),
        )


@dataclass
class ChildNodeCountUpdated:
    '''
    Fired when `Container`'s child node count has changed.
    '''
    #: Fired when `Container`'s child node count has changed.
    node_id: NodeId

    #: Fired when `Container`'s child node count has changed.
    child_node_count: int

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'childNodeCountUpdated'

    @classmethod
    def from_json(cls, json: dict) -> 'ChildNodeCountUpdated':
        return cls(
            node_id=NodeId.from_json(json['nodeId']),
            child_node_count=int(json['childNodeCount']),
        )


@dataclass
class ChildNodeInserted:
    '''
    Mirrors `DOMNodeInserted` event.
    '''
    #: Mirrors `DOMNodeInserted` event.
    parent_node_id: NodeId

    #: Mirrors `DOMNodeInserted` event.
    previous_node_id: NodeId

    #: Mirrors `DOMNodeInserted` event.
    node: Node

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'childNodeInserted'

    @classmethod
    def from_json(cls, json: dict) -> 'ChildNodeInserted':
        return cls(
            parent_node_id=NodeId.from_json(json['parentNodeId']),
            previous_node_id=NodeId.from_json(json['previousNodeId']),
            node=Node.from_json(json['node']),
        )


@dataclass
class ChildNodeRemoved:
    '''
    Mirrors `DOMNodeRemoved` event.
    '''
    #: Mirrors `DOMNodeRemoved` event.
    parent_node_id: NodeId

    #: Mirrors `DOMNodeRemoved` event.
    node_id: NodeId

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'childNodeRemoved'

    @classmethod
    def from_json(cls, json: dict) -> 'ChildNodeRemoved':
        return cls(
            parent_node_id=NodeId.from_json(json['parentNodeId']),
            node_id=NodeId.from_json(json['nodeId']),
        )


@dataclass
class DistributedNodesUpdated:
    '''
    Called when distrubution is changed.
    '''
    #: Called when distrubution is changed.
    insertion_point_id: NodeId

    #: Called when distrubution is changed.
    distributed_nodes: typing.List['BackendNode']

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'distributedNodesUpdated'

    @classmethod
    def from_json(cls, json: dict) -> 'DistributedNodesUpdated':
        return cls(
            insertion_point_id=NodeId.from_json(json['insertionPointId']),
            distributed_nodes=[BackendNode.from_json(i) for i in json['distributedNodes']],
        )


@dataclass
class DocumentUpdated:
    '''
    Fired when `Document` has been totally updated. Node ids are no longer valid.
    '''
    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'documentUpdated'

    @classmethod
    def from_json(cls, json: dict) -> 'DocumentUpdated':
        return cls(
        )


@dataclass
class InlineStyleInvalidated:
    '''
    Fired when `Element`'s inline style is modified via a CSS property modification.
    '''
    #: Fired when `Element`'s inline style is modified via a CSS property modification.
    node_ids: typing.List['NodeId']

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'inlineStyleInvalidated'

    @classmethod
    def from_json(cls, json: dict) -> 'InlineStyleInvalidated':
        return cls(
            node_ids=[NodeId.from_json(i) for i in json['nodeIds']],
        )


@dataclass
class PseudoElementAdded:
    '''
    Called when a pseudo element is added to an element.
    '''
    #: Called when a pseudo element is added to an element.
    parent_id: NodeId

    #: Called when a pseudo element is added to an element.
    pseudo_element: Node

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'pseudoElementAdded'

    @classmethod
    def from_json(cls, json: dict) -> 'PseudoElementAdded':
        return cls(
            parent_id=NodeId.from_json(json['parentId']),
            pseudo_element=Node.from_json(json['pseudoElement']),
        )


@dataclass
class PseudoElementRemoved:
    '''
    Called when a pseudo element is removed from an element.
    '''
    #: Called when a pseudo element is removed from an element.
    parent_id: NodeId

    #: Called when a pseudo element is removed from an element.
    pseudo_element_id: NodeId

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'pseudoElementRemoved'

    @classmethod
    def from_json(cls, json: dict) -> 'PseudoElementRemoved':
        return cls(
            parent_id=NodeId.from_json(json['parentId']),
            pseudo_element_id=NodeId.from_json(json['pseudoElementId']),
        )


@dataclass
class SetChildNodes:
    '''
    Fired when backend wants to provide client with the missing DOM structure. This happens upon
    most of the calls requesting node ids.
    '''
    #: Fired when backend wants to provide client with the missing DOM structure. This happens upon
    #: most of the calls requesting node ids.
    parent_id: NodeId

    #: Fired when backend wants to provide client with the missing DOM structure. This happens upon
    #: most of the calls requesting node ids.
    nodes: typing.List['Node']

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'setChildNodes'

    @classmethod
    def from_json(cls, json: dict) -> 'SetChildNodes':
        return cls(
            parent_id=NodeId.from_json(json['parentId']),
            nodes=[Node.from_json(i) for i in json['nodes']],
        )


@dataclass
class ShadowRootPopped:
    '''
    Called when shadow root is popped from the element.
    '''
    #: Called when shadow root is popped from the element.
    host_id: NodeId

    #: Called when shadow root is popped from the element.
    root_id: NodeId

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'shadowRootPopped'

    @classmethod
    def from_json(cls, json: dict) -> 'ShadowRootPopped':
        return cls(
            host_id=NodeId.from_json(json['hostId']),
            root_id=NodeId.from_json(json['rootId']),
        )


@dataclass
class ShadowRootPushed:
    '''
    Called when shadow root is pushed into the element.
    '''
    #: Called when shadow root is pushed into the element.
    host_id: NodeId

    #: Called when shadow root is pushed into the element.
    root: Node

    # These fields are used for internal purposes and are not part of CDP
    _domain = 'DOM'
    _method = 'shadowRootPushed'

    @classmethod
    def from_json(cls, json: dict) -> 'ShadowRootPushed':
        return cls(
            host_id=NodeId.from_json(json['hostId']),
            root=Node.from_json(json['root']),
        )

