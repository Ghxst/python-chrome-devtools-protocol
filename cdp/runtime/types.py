'''
DO NOT EDIT THIS FILE

This file is generated from the CDP definitions. If you need to make changes,
edit the generator and regenerate all of the modules.

Domain: runtime
Experimental: False
'''

from dataclasses import dataclass, field
import typing


class ScriptId(str):
    '''
    Unique script identifier.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'ScriptId({})'.format(str.__repr__(self))


class RemoteObjectId(str):
    '''
    Unique object identifier.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'RemoteObjectId({})'.format(str.__repr__(self))


class UnserializableValue(str):
    '''
    Primitive value which cannot be JSON-stringified. Includes values `-0`, `NaN`, `Infinity`,
    `-Infinity`, and bigint literals.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'UnserializableValue({})'.format(str.__repr__(self))


class ExecutionContextId(int):
    '''
    Id of an execution context.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'ExecutionContextId({})'.format(int.__repr__(self))


class Timestamp(float):
    '''
    Number of milliseconds since epoch.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'Timestamp({})'.format(float.__repr__(self))


class TimeDelta(float):
    '''
    Number of milliseconds.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'TimeDelta({})'.format(float.__repr__(self))


class UniqueDebuggerId(str):
    '''
    Unique identifier of current debugger.
    '''
    @classmethod
    def from_response(cls, response):
        return cls(response)

    def __repr__(self):
        return 'UniqueDebuggerId({})'.format(str.__repr__(self))



@dataclass
class CustomPreview:
    #: The JSON-stringified result of formatter.header(object, config) call.
    #: It contains json ML array that represents RemoteObject.
    header: str

    #: If formatter returns true as a result of formatter.hasBody call then bodyGetterId will
    #: contain RemoteObjectId for the function that returns result of formatter.body(object, config) call.
    #: The result value is json ML array.
    body_getter_id: RemoteObjectId

    @classmethod
    def from_response(cls, response):
        return cls(
            header=str(response.get('header')),
            body_getter_id=RemoteObjectId.from_response(response.get('bodyGetterId')),
        )


@dataclass
class ObjectPreview:
    '''
    Object containing abbreviated remote object value.
    '''
    #: Object type.
    type_: str

    #: Object subtype hint. Specified for `object` type values only.
    subtype: str

    #: String representation of the object.
    description: str

    #: True iff some of the properties or entries of the original object did not fit.
    overflow: bool

    #: List of the properties.
    properties: typing.List['PropertyPreview']

    #: List of the entries. Specified for `map` and `set` subtype values only.
    entries: typing.List['EntryPreview']

    @classmethod
    def from_response(cls, response):
        return cls(
            type_=str(response.get('type')),
            subtype=str(response.get('subtype')),
            description=str(response.get('description')),
            overflow=bool(response.get('overflow')),
            properties=[PropertyPreview.from_response(i) for i in response.get('properties')],
            entries=[EntryPreview.from_response(i) for i in response.get('entries')],
        )


@dataclass
class PropertyPreview:
    #: Property name.
    name: str

    #: Object type. Accessor means that the property itself is an accessor property.
    type_: str

    #: User-friendly property value string.
    value: str

    #: Nested value preview.
    value_preview: ObjectPreview

    #: Object subtype hint. Specified for `object` type values only.
    subtype: str

    @classmethod
    def from_response(cls, response):
        return cls(
            name=str(response.get('name')),
            type_=str(response.get('type')),
            value=str(response.get('value')),
            value_preview=ObjectPreview.from_response(response.get('valuePreview')),
            subtype=str(response.get('subtype')),
        )


@dataclass
class EntryPreview:
    #: Preview of the key. Specified for map-like collection entries.
    key: ObjectPreview

    #: Preview of the value.
    value: ObjectPreview

    @classmethod
    def from_response(cls, response):
        return cls(
            key=ObjectPreview.from_response(response.get('key')),
            value=ObjectPreview.from_response(response.get('value')),
        )


@dataclass
class CallArgument:
    '''
    Represents function call argument. Either remote object id `objectId`, primitive `value`,
    unserializable primitive value or neither of (for undefined) them should be specified.
    '''
    #: Primitive value or serializable javascript object.
    value: typing.Any

    #: Primitive value which can not be JSON-stringified.
    unserializable_value: UnserializableValue

    #: Remote object handle.
    object_id: RemoteObjectId

    @classmethod
    def from_response(cls, response):
        return cls(
            value=typing.Any(response.get('value')),
            unserializable_value=UnserializableValue.from_response(response.get('unserializableValue')),
            object_id=RemoteObjectId.from_response(response.get('objectId')),
        )


@dataclass
class ExecutionContextDescription:
    '''
    Description of an isolated world.
    '''
    #: Unique id of the execution context. It can be used to specify in which execution context
    #: script evaluation should be performed.
    id: ExecutionContextId

    #: Execution context origin.
    origin: str

    #: Human readable name describing given context.
    name: str

    #: Embedder-specific auxiliary data.
    aux_data: dict

    @classmethod
    def from_response(cls, response):
        return cls(
            id=ExecutionContextId.from_response(response.get('id')),
            origin=str(response.get('origin')),
            name=str(response.get('name')),
            aux_data=dict(response.get('auxData')),
        )


@dataclass
class CallFrame:
    '''
    Stack entry for runtime errors and assertions.
    '''
    #: JavaScript function name.
    function_name: str

    #: JavaScript script id.
    script_id: ScriptId

    #: JavaScript script name or url.
    url: str

    #: JavaScript script line number (0-based).
    line_number: int

    #: JavaScript script column number (0-based).
    column_number: int

    @classmethod
    def from_response(cls, response):
        return cls(
            function_name=str(response.get('functionName')),
            script_id=ScriptId.from_response(response.get('scriptId')),
            url=str(response.get('url')),
            line_number=int(response.get('lineNumber')),
            column_number=int(response.get('columnNumber')),
        )


@dataclass
class StackTraceId:
    '''
    If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This
    allows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages.
    '''
    id: str

    debugger_id: UniqueDebuggerId

    @classmethod
    def from_response(cls, response):
        return cls(
            id=str(response.get('id')),
            debugger_id=UniqueDebuggerId.from_response(response.get('debuggerId')),
        )


@dataclass
class RemoteObject:
    '''
    Mirror object referencing original JavaScript object.
    '''
    #: Object type.
    type_: str

    #: Object subtype hint. Specified for `object` type values only.
    subtype: str

    #: Object class (constructor) name. Specified for `object` type values only.
    class_name: str

    #: Remote object value in case of primitive values or JSON values (if it was requested).
    value: typing.Any

    #: Primitive value which can not be JSON-stringified does not have `value`, but gets this
    #: property.
    unserializable_value: UnserializableValue

    #: String representation of the object.
    description: str

    #: Unique object identifier (for non-primitive values).
    object_id: RemoteObjectId

    #: Preview containing abbreviated property values. Specified for `object` type values only.
    preview: ObjectPreview

    custom_preview: CustomPreview

    @classmethod
    def from_response(cls, response):
        return cls(
            type_=str(response.get('type')),
            subtype=str(response.get('subtype')),
            class_name=str(response.get('className')),
            value=typing.Any(response.get('value')),
            unserializable_value=UnserializableValue.from_response(response.get('unserializableValue')),
            description=str(response.get('description')),
            object_id=RemoteObjectId.from_response(response.get('objectId')),
            preview=ObjectPreview.from_response(response.get('preview')),
            custom_preview=CustomPreview.from_response(response.get('customPreview')),
        )


@dataclass
class PropertyDescriptor:
    '''
    Object property descriptor.
    '''
    #: Property name or symbol description.
    name: str

    #: The value associated with the property.
    value: RemoteObject

    #: True if the value associated with the property may be changed (data descriptors only).
    writable: bool

    #: A function which serves as a getter for the property, or `undefined` if there is no getter
    #: (accessor descriptors only).
    get: RemoteObject

    #: A function which serves as a setter for the property, or `undefined` if there is no setter
    #: (accessor descriptors only).
    set: RemoteObject

    #: True if the type of this property descriptor may be changed and if the property may be
    #: deleted from the corresponding object.
    configurable: bool

    #: True if this property shows up during enumeration of the properties on the corresponding
    #: object.
    enumerable: bool

    #: True if the result was thrown during the evaluation.
    was_thrown: bool

    #: True if the property is owned for the object.
    is_own: bool

    #: Property symbol object, if the property is of the `symbol` type.
    symbol: RemoteObject

    @classmethod
    def from_response(cls, response):
        return cls(
            name=str(response.get('name')),
            value=RemoteObject.from_response(response.get('value')),
            writable=bool(response.get('writable')),
            get=RemoteObject.from_response(response.get('get')),
            set=RemoteObject.from_response(response.get('set')),
            configurable=bool(response.get('configurable')),
            enumerable=bool(response.get('enumerable')),
            was_thrown=bool(response.get('wasThrown')),
            is_own=bool(response.get('isOwn')),
            symbol=RemoteObject.from_response(response.get('symbol')),
        )


@dataclass
class InternalPropertyDescriptor:
    '''
    Object internal property descriptor. This property isn't normally visible in JavaScript code.
    '''
    #: Conventional property name.
    name: str

    #: The value associated with the property.
    value: RemoteObject

    @classmethod
    def from_response(cls, response):
        return cls(
            name=str(response.get('name')),
            value=RemoteObject.from_response(response.get('value')),
        )


@dataclass
class PrivatePropertyDescriptor:
    '''
    Object private field descriptor.
    '''
    #: Private property name.
    name: str

    #: The value associated with the private property.
    value: RemoteObject

    @classmethod
    def from_response(cls, response):
        return cls(
            name=str(response.get('name')),
            value=RemoteObject.from_response(response.get('value')),
        )


@dataclass
class StackTrace:
    '''
    Call frames for assertions or error messages.
    '''
    #: String label of this stack trace. For async traces this may be a name of the function that
    #: initiated the async call.
    description: str

    #: JavaScript function name.
    call_frames: typing.List['CallFrame']

    #: Asynchronous JavaScript stack trace that preceded this stack, if available.
    parent: 'StackTrace'

    #: Asynchronous JavaScript stack trace that preceded this stack, if available.
    parent_id: StackTraceId

    @classmethod
    def from_response(cls, response):
        return cls(
            description=str(response.get('description')),
            call_frames=[CallFrame.from_response(i) for i in response.get('callFrames')],
            parent='StackTrace'.from_response(response.get('parent')),
            parent_id=StackTraceId.from_response(response.get('parentId')),
        )


@dataclass
class ExceptionDetails:
    '''
    Detailed information about exception (or error) that was thrown during script compilation or
    execution.
    '''
    #: Exception id.
    exception_id: int

    #: Exception text, which should be used together with exception object when available.
    text: str

    #: Line number of the exception location (0-based).
    line_number: int

    #: Column number of the exception location (0-based).
    column_number: int

    #: Script ID of the exception location.
    script_id: ScriptId

    #: URL of the exception location, to be used when the script was not reported.
    url: str

    #: JavaScript stack trace if available.
    stack_trace: StackTrace

    #: Exception object if available.
    exception: RemoteObject

    #: Identifier of the context where exception happened.
    execution_context_id: ExecutionContextId

    @classmethod
    def from_response(cls, response):
        return cls(
            exception_id=int(response.get('exceptionId')),
            text=str(response.get('text')),
            line_number=int(response.get('lineNumber')),
            column_number=int(response.get('columnNumber')),
            script_id=ScriptId.from_response(response.get('scriptId')),
            url=str(response.get('url')),
            stack_trace=StackTrace.from_response(response.get('stackTrace')),
            exception=RemoteObject.from_response(response.get('exception')),
            execution_context_id=ExecutionContextId.from_response(response.get('executionContextId')),
        )

